var documenterSearchIndex = {"docs":
[{"location":"c3_mdofgen_ahb/#ex_c3","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"Example C3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"","category":"section"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"It is sometimes the case that it is necessary to conduct forced response simulations where the response amplitude is kept fixed. In fact, experimentally it is significantly easier to achieve response-controlled forced response measurements (in the context of, say, stepped sine testing) than force-controlled measurements. While there are several reasons for this (large displacement effects on the exciter at resonance, low SNR at anti-resonance points, etc.), we will not go into this here.","category":"page"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"MDOFUTILS provides HBRESFUN_A!, a routine that returns the harmonic balance residue along with an amplitude constraint. The usage of this is only slightly different from HBRESFUN! (which we have already encountered in Examples C1 and C2 for forced response analysis).","category":"page"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"The same system as before will be studied here:","category":"page"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"underbracebeginbmatrix 1001 endbmatrix_mxM beginbmatrix ddotx_1 ddotx_2 endbmatrix +\nleft( 001 mxM + 0001 mxKright) beginbmatrix dotx_1 dotx_2 endbmatrix + underbracebeginbmatrix 2-1-12 endbmatrix_mxK beginbmatrix x_1x_2 endbmatrix + beginbmatrix 0 f_fr(x_2) endbmatrix = beginbmatrix 10 endbmatrixcosOmega t","category":"page"},{"location":"c3_mdofgen_ahb/#Preamble:-Load-Packages","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"Preamble: Load Packages","text":"","category":"section"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"using GLMakie\nusing LinearAlgebra\nusing SparseArrays\nusing ForwardDiff\nusing NonlinearSolve\nusing DSP\n\nusing juliajim.HARMONIC\nusing juliajim.CONTINUATION\nusing juliajim.MDOFUTILS","category":"page"},{"location":"c3_mdofgen_ahb/#exc3_setup","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"System Setup","text":"","category":"section"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"MCK matrices and nonlinearity setup: identical to Example C2.","category":"page"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"M = I(2);\nK = [2 -1;-1 2];\nC = 0.01*M+0.001*K;\n\nmdl = MDOFGEN(M, C, K);\n\n# Nonlinearity\nkt = 1.0;\nfs = 1.0;\nfnl = (t,u,up,fp)-> if all(abs.(fp+kt*(u-up)).<fs)\n    return fp+kt*(u-up), kt*ones(size(u)), -kt*ones(size(u)), ones(size(u)); else\n        return fs*sign.(fp+kt*(u-up)), zeros(size(u)), zeros(size(u)), zeros(size(u));\nend\nL = [0.0 1.0];\n\nmdl = ADDNL(mdl, :Hyst, fnl, L);\nnothing #hide","category":"page"},{"location":"c3_mdofgen_ahb/#exc3_hbsetup","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"Setup HB","text":"","category":"section"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"HB setup: identical to Example C2.","category":"page"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"h = 1:2:5;\n# h = 0:5;\nN = 256;\nt = (0:N-1)*2Ï€/N;\n\nNhc = sum(all(h.==0, dims=2) + 2any(h.!=0, dims=2));\n\n_, _, zinds, rinds, iinds = HINDS(mdl.Ndofs, h)\nFl = zeros(Nhc*mdl.Ndofs);\nFl[rinds[1]] = 1.0;\n\nWst = 0.6;\nE, dEdw = HARMONICSTIFFNESS(mdl.M, mdl.C, mdl.K, Wst, h);\nU0 = E\\Fl;\nnothing #hide","category":"page"},{"location":"c3_mdofgen_ahb/#exc3_testhb","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"Test HB Residue","text":"","category":"section"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"The residue function HBRESFUN_A! expects a vector of the form (\\begin{bmatrix} \\vc{u}& F& \\Omega \\end{bmatrix}^T), where (\\vc{u}) is the vector of harmonics, (F) is the (scalar) excitation amplitude (also an unknown), and (\\Omega) is the (scalar) excitation frequency. Apart from the same arguments as HBRESFUN!, the required response amplitude Amp must also be provided here. By default, this amplitude is interpreted as the first harmonic amplitude of the first DoF. This can be customized by supplying optional keywords atype (one of :H1 or :RMS, specifying type of amplitude measure) and ashape (either DoF index or vector of weights to DoFs); see the documentation. Here we set this up using NonlinearSolve.jl and solve for a single point.","category":"page"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"R = zeros(mdl.Ndofs*Nhc+1);\ndRdUf = zeros(mdl.Ndofs*Nhc+1, mdl.Ndofs*Nhc+1);\ndRdw = zeros(mdl.Ndofs*Nhc+1);\nAmp = 1e0;\ndof = 1;\n\nHBRESFUN_A!([U0; 1.0; Wst], mdl, Amp, Fl, h, N; R=R, dRdUf=dRdUf, dRdw=dRdw)\n\nfun = NonlinearFunction((r,uf,p)->HBRESFUN_A!([uf;p], mdl, Amp, Fl, h, N; R=r),\n    jac=(J,uf,p)->HBRESFUN_A!([uf;p], mdl, Amp, Fl, h, N; dRdUf=J),\n    paramjac=(Jp,uf,p)->HBRESFUN_A!([uf;p], mdl, Amp, Fl, h, N; dRdw=Jp));\n\nprob = NonlinearProblem(fun, [U0;1.0], Wst);\nsol = solve(prob, show_trace=Val(true));\nnothing #hide","category":"page"},{"location":"c3_mdofgen_ahb/#exc3_cont","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"Continuation","text":"","category":"section"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"Now we continue as before with continuation. In fact this piece of code is exactly the same as in Example C2.","category":"page"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"Om0 = 0.1;\nOm1 = 3;\ndOm = 0.1;\n\ncpars = (parm=:arclength, nmax=400, Dsc=:none, itopt=4);\nsols, its, dss, xis, Dsc = CONTINUATE([U0;1.0], fun, [Om0, Om1], dOm; cpars...);\n\nuh = zeros(Complex, maximum(h)+1, length(sols), 2);\nfor i in 1:2\n    uh[h.+1, :, i] = hcat([[s.up[zinds[i:2:end]];\n                            s.up[rinds[i:2:end]]+1im*s.up[iinds[i:2:end]]]\n                          for s in sols]...);\nend\nOms = [s.up[end] for s in sols];\nFs = [s.up[end-1] for s in sols];\nnothing #hide","category":"page"},{"location":"c3_mdofgen_ahb/#exc3_plot","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"Plotting","text":"","category":"section"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"We plot first just the responses, to demonstrate how the amplitude constraint has been effective.","category":"page"},{"location":"c3_mdofgen_ahb/#Amplitude-Responses","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"Amplitude Responses","text":"","category":"section"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"his = [1, 3, 5];\n\nset_theme!(theme_latexfonts())\nfsz = 24;\nfig1 = Figure(fontsize=fsz, size=(1000, 600));\n\nfor i in eachindex(his[his.<=maximum(h)])\n    ax = Axis(fig1[1, i],\n        ylabel=L\"$H_%$(his[i])$ Response (m)\", yscale=log10);\n    scatterlines!(ax, Oms, abs.(uh[his[i].+1, :, 1]), label=\"x1\");\n    scatterlines!(ax, Oms, abs.(uh[his[i].+1, :, 2]), label=\"x2\");\n    if i==1\n        axislegend(ax)\n    end\n\n    ax = Axis(fig1[2, i], xlabel=L\"Excitation Frequency $\\Omega$\",\n        ylabel=L\"$H_%$(his[i])$ Phase (rad)\");\n    scatterlines!(ax, Oms, unwrap(angle.(uh[his[i].+1, :, 1])), label=\"x1\");\n    scatterlines!(ax, Oms, unwrap(angle.(uh[his[i].+1, :, 2])), label=\"x2\");\nend\n\n    fig1","category":"page"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"It can be observed that the first harmonic of the first DoF is always fixed to the value of Amp (10 here), while the other DoF's amplitude changes, showing that we have a fixed amplitude forced response here.","category":"page"},{"location":"c3_mdofgen_ahb/#Forced-Responses","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"Forced Responses","text":"","category":"section"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"In order to visualize the nonlinear forced response function, we plot the response over force next. Here the resonances are clearly visible, albeit very different from what was seen in Example C2.","category":"page"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"his = [1, 3, 5];\n\nset_theme!(theme_latexfonts())\nfsz = 24;\nfig2 = Figure(fontsize=fsz, size=(1000, 600));\n\nfor i in eachindex(his[his.<=maximum(h)])\n    ax = Axis(fig2[1, i],\n        ylabel=L\"$H_%$(his[i])$ Response (m/N)\", yscale=log10);\n    scatterlines!(ax, Oms, abs.(uh[his[i].+1, :, 1])./Fs, label=\"x1\");\n    scatterlines!(ax, Oms, abs.(uh[his[i].+1, :, 2])./Fs, label=\"x2\");\n\n    ax = Axis(fig2[2, i], xlabel=L\"Excitation Frequency $\\Omega$\",\n        ylabel=L\"$H_%$(his[i])$ Phase (rad)\");\n    scatterlines!(ax, Oms, unwrap(angle.(uh[his[i].+1, :, 1])), label=\"x1\");\n    scatterlines!(ax, Oms, unwrap(angle.(uh[his[i].+1, :, 2])), label=\"x2\");\nend\n\n    fig2","category":"page"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"","category":"page"},{"location":"c3_mdofgen_ahb/","page":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","title":"3: Response Constrained Forced Response of a 2DoF Hysteretic Oscillator","text":"This page was generated using Literate.jl.","category":"page"},{"location":"c5_mdofgen_newmark/#ex_c5","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"Example C5: Transient Response of a 2DoF Hysteretic Oscillator using A Newmark Scheme","text":"","category":"section"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"In this example we show how the MDOFUTILS suite can also be used for conducting transient analysis. A natural question may be why not just use SciML's DifferentialEquations.jl. The answer lies in hysteretic nonlinearities implemented in the incremental formalism. It is not trivial to use existing methods for integrating these systems without additional complexity (computational as well as conceptual).","category":"page"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"However, classical second order methods (central difference, linear acceleration, Newmark-(\\beta), Wilson-(\\theta), HHT-(\\alpha), etc.) naturally lend themselves to hysterestic systems! This is because these integrators require the difference in force between the previous and the next time instants, which is the most convenient way of specifying an incremental hysteretic nonlinearity.","category":"page"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"Here we analyze the same 2DoF oscillator as in the last few examples:","category":"page"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"underbracebeginbmatrix 1001 endbmatrix_mxM beginbmatrix ddotx_1 ddotx_2 endbmatrix +\nleft( 001 mxM + 0001 mxKright) beginbmatrix dotx_1 dotx_2 endbmatrix + underbracebeginbmatrix 2-1-12 endbmatrix_mxK beginbmatrix x_1x_2 endbmatrix + beginbmatrix 0 f_fr(x_2) endbmatrix = beginbmatrix 10 endbmatrixcosOmega t","category":"page"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"The steps followed in the example are:","category":"page"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"First we setup the system and the nonlinearity (and also check the nonlinear force evaluation).\nThen we setup the initial conditions and transient analysis parameters and do the actual analysis.\nFinally we visualize the results.","category":"page"},{"location":"c5_mdofgen_newmark/#Preamble:-Load-Packages","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"Preamble: Load Packages","text":"","category":"section"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"using GLMakie\nusing LinearAlgebra\nusing SparseArrays\nusing ForwardDiff\nusing NonlinearSolve\nusing DSP\n\nusing juliajim.HARMONIC\nusing juliajim.CONTINUATION\nusing juliajim.MDOFUTILS","category":"page"},{"location":"c5_mdofgen_newmark/#exc5_setup","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"System Setup","text":"","category":"section"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"M = I(2);\nK = [2 -1;-1 2];\nC = 0.01*M+0.001*K;\n\nmdl = MDOFGEN(M, C, K);\n\n# Nonlinearity\nkt = 1.0;\nfs = 1.0;\nfnl = (t,u,up,fp)-> if all(abs.(fp+kt*(u-up)).<fs)\n    return fp+kt*(u-up), kt*ones(size(u)), -kt*ones(size(u)), ones(size(u)); else\n        return fs*sign.(fp+kt*(u-up)), zeros(size(u)), zeros(size(u)), zeros(size(u));\nend\nL = [0.0 1.0];\nFv = [1.0, 0.0];\n\nmdl = ADDNL(mdl, :Hyst, fnl, L);\nnothing #hide","category":"page"},{"location":"c5_mdofgen_newmark/#Nonlinear-Force-Evaluation","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"Nonlinear Force Evaluation","text":"","category":"section"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"Here we test the nonlinear force evaluation using the NLFORCE routine, which is used internally to compute the nonlinear forces in time domain. This function requires, at minimum, the time and displacement-velocity states. But it also accepts the states at the previous instant for the computation (very much relevant for hysteretic nonlinearities). If these are not provided, they are all defaulted to zero. Apart from the nonlinear force and its Jacobians, the routine also outputs S, which is a Vector as long as the number of nonlinearities present. Each element of the vector is a vector of the forces of the nonlinearity. These are relevant for hysteretic nonlinearities where explicit history dependence is very important.","category":"page"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"Fnl, dFnldU, dFnldUd, S = NLFORCE(mdl, 0, zeros(2), zeros(2))","category":"page"},{"location":"c5_mdofgen_newmark/#exc5_trans","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"Transient March","text":"","category":"section"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"Now we are ready to conduct the transient simulation. We set trivial initial conditions and provide periodic excitation at a point well below the first resonance (which is at (1) rad/s).","category":"page"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"U0 = zeros(2);\nUd0 = zeros(2);\nfsamp = 10;\nOm = 0.6;  # rad/s\nFamp = 4;\nFex = t-> Famp*Fv*cos(Om*t);\nTmax = 2Ï€/Om*100;\n\nt = 0:1/fsamp:Tmax;\n\nU, Ud, Udd, S = NEWMARKMARCH(mdl, 0, Tmax, 1/fsamp, U0, Ud0, Fex, verbosity=100)","category":"page"},{"location":"c5_mdofgen_newmark/#exc5_plot","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"Plotting","text":"","category":"section"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"Now we plot all the results. We plot them in terms of the states (displacements and velocities from U, Ud) as well as the slider internal forces from S. A strongly nonlinear response can be observed with the steady-state zoom-in (to the last cycle) showing highly non-smooth behavior. The displacement and velocity plots also show a significant presence of higher harmonics, underlying the same.","category":"page"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"set_theme!(theme_latexfonts())\nfsz = 20;\nfig = Figure(fontsize=fsz, size=(1000, 600));\n\nax1 = Axis(fig[1, 1:2], ylabel=\"Displacement (m)\", title=\"Complete Response\");\nfor i in 1:2\n    lines!(ax1, t, U[i,:])\nend\nax10 = Axis(fig[1, 3], title=\"Steady State\");\nfor i in 1:2\n    scatterlines!(ax10, t, U[i,:], label=\"x$(i)\")\nend\naxislegend(ax10, position=:ct)\nxlims!(ax10, Tmax-2Ï€/Om, Tmax);\nylims!(ax10, -maximum(abs.(U)), maximum(abs.(U)));\n\nax2 = Axis(fig[2, 1:2], ylabel=\"Velocity (m/s)\");\nfor i in 1:2\n    lines!(ax2, t, Ud[i,:])\nend\nax20 = Axis(fig[2, 3]);\nfor i in 1:2\n    scatterlines!(ax20, t, Ud[i,:])\nend\nxlims!(ax20, Tmax-2Ï€/Om, Tmax);\nylims!(ax20, -maximum(abs.(Ud)), maximum(abs.(Ud)));\n\nax3 = Axis(fig[3, 1:2], xlabel=\"Time (s)\", ylabel=\"Friction force (N)\")\nlines!(ax3, t, getindex.(S, 1)[:])\nax30 = Axis(fig[3, 3], xlabel=\"Time (s)\")\nscatterlines!(ax30, t, getindex.(S, 1)[:])\nxlims!(ax30, Tmax-2Ï€/Om, Tmax);\n\nlinkxaxes!(ax1, ax2, ax3);\n\n   fig","category":"page"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"","category":"page"},{"location":"c5_mdofgen_newmark/","page":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","title":"5: Transient Response of a 2DoF Hysteretic Oscillator using Newmark Scheme","text":"This page was generated using Literate.jl.","category":"page"},{"location":"b2_jenkhb/#ex_b2","page":"2: Frictional Oscillator","title":"Example B2: Numerical Continuation on a Frictional Oscillator","text":"","category":"section"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"The scope as well as the approach of this example are very similar to Example b1, with a key difference: this example involves a hysteretic nonlinearity. This poses a very important difference in how the nonlinear force and its harmonics are computed.","category":"page"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"The general setup for the problem is similar:","category":"page"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"ddotx + 2zeta_0omega_0dotx + omega_0^2 x + f_nl = FcosOmega t","category":"page"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"The nonlinearity f_nl is a hysteretically saturated linear spring with low amplitude stiffness k_t and saturation limit (\"slip\" force) f_s.","category":"page"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"The steps that will be followed in this file are exactly the same as in Example b1:","category":"page"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"First we define a \"harmonic residue\" function for the Duffing oscillator in a way that returns the residue, its Jacobian with respect to the vector of harmonics (see Example a), and also with respect to the excitation frequency.\nNext we define the parameters for the problem and setup the necessary variables for the Harmonic Balance (and AFT).\nThen we conduct the actual continuation after setting up parameters for this.\nFinally the results are plotted in terms of the different harmonics present.","category":"page"},{"location":"b2_jenkhb/#Preamble:-Load-Packages","page":"2: Frictional Oscillator","title":"Preamble: Load Packages","text":"","category":"section"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"using GLMakie\nusing LaTeXStrings\nusing LinearAlgebra\nusing NonlinearSolve\nusing ForwardDiff\nusing DSP\n\nusing juliajim.HARMONIC\nusing juliajim.CONTINUATION","category":"page"},{"location":"b2_jenkhb/#exb2_res","page":"2: Frictional Oscillator","title":"Define Residue Function","text":"","category":"section"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"The structure of the residue function is identical to that in Example 1. A key differerence is in the computation of the nonlinear force.","category":"page"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"Unlike in the previous case, the restoring force of a hysteretic element can not be estimated at any instant of time independent of its history. In other words, the restoring force of a hysteretic element can be different based on its loading history. For steady state calculations, we start by assuming initially that the hysteretic element acts as a linear spring (see ft=kt*ut below) and then \"march forward\" in time. At each instant the incremental form of the friction law is used to check if saturation is violated and the restoring force is corrected appropriately. The force \"shakes down\" after repeating this for 2 or more cycles of the period. We use this steady-state force for the Fourier transforms involve in Harmonic Balance.","category":"page"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"function RESFUN!(Uw, Fl, pars, h, Nt; R=nothing, dRdU=nothing, dRdw=nothing)\n    (; z0, w0, kt, fs, F) = pars;\n\n    Om = Uw[end];\n    Nhc = sum((h.==0)+2(h.!=0));\n\n    # Linear Portion\n    E, dEdw = HARMONICSTIFFNESS(1.0, 2z0*w0, w0^2, Om, h);\n\n    # AFT For nonlinear force\n    ut  = AFT(Uw[1:end-1], h, Nt, :f2t);\n\n    # Construct Residue\n    if !(R === nothing && dRdU === nothing)\n        ft = kt*ut;\n        if !(dRdU === nothing)\n            cst = AFT(eltype(Uw).(I(Nhc)), h, Nt, :f2t);\n            dfdat = kt.*cst;\n        end\n\n        for _ in 1:2\n            for (ti, tim1) in zip(1:Nt, circshift(1:Nt,1))\n                fsp = kt*(ut[ti]-ut[tim1]) + ft[tim1];  # stick prediction\n                ft[ti] = clamp(fsp, -fs, fs);\n                if !(dRdU === nothing)\n                    if (abs(fsp)<fs)\n                        dfdat[ti, :] = kt.*(cst[ti,:]-cst[tim1,:]) + dfdat[tim1,:];\n                    else\n                        dfdat[ti, :] .= 0.0;\n                    end\n                end\n            end\n        end\n        if !(R === nothing)\n            Fnl = AFT(ft, h, Nt, :t2f);\n            R[:] = E*Uw[1:end-1] + Fnl - Fl*F;\n        end\n        if !(dRdU === nothing)\n            Jnl    = AFT(dfdat, h, Nt, :t2f);\n            dRdU[:, :] = E + Jnl;\n        end\n    end\n    if !(dRdw === nothing)\n        dRdw[:] = dEdw*Uw[1:end-1];\n    end\n    return nothing;\nend","category":"page"},{"location":"b2_jenkhb/#exb2_setup","page":"2: Frictional Oscillator","title":"Setup","text":"","category":"section"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"Now we setup the specific problem by assigning numerical values to the parameters. Odd harmonics are chosen for the Harmonic Balance since we already have some intuition on the nonlinearity (it, being an \"odd function\" nonlinearity). As before, this is followed by setting up a NonlinearFunction object that will be used for the continuation.","category":"page"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"pars = (z0 = 0.5e-2, w0 = 2., kt = 5.0, fs=1.0, F = 0.1);\n\n# h = (0:5); # Also possible\nh = 1:2:5;\nOm = 0.1;\n\nNhc = sum((h.==0)+2(h.!=0));\nNt = 2^9;\n\nFl = zeros(Nhc);\n_,_,zinds,rinds,iinds = HINDS(1, h)\nFl[rinds[1]] = 1.0;\n\nfun = NonlinearFunction((r,u,p)->RESFUN!([u;p],Fl,pars,h,Nt;R=r),\n    jac=(J,u,p)->RESFUN!([u;p],Fl,pars,h,Nt;dRdU=J),\n    paramjac=(Jp,u,p)->RESFUN!([u;p],Fl,pars,h,Nt;dRdw=Jp));\nnothing #hide","category":"page"},{"location":"b2_jenkhb/#Check-by-solving-for-a-Single-point","page":"2: Frictional Oscillator","title":"Check by solving for a Single point","text":"","category":"section"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"We do the single point check to ensure that everything works - no errors in the residue, the Jacobian is correct, etc. This should also converge within 3-4 iterations.","category":"page"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"E = zeros(Nhc, Nhc);\nHARMONICSTIFFNESS!(E, nothing, 1.0, 2pars.z0*pars.w0, pars.w0^2+pars.kt, Om, h);\nU0 = E\\ (Fl*pars.F);\n\nprob = NonlinearProblem(fun, U0, Om);\nsol = solve(prob, show_trace=Val(true));\nnothing #hide","category":"page"},{"location":"b2_jenkhb/#exb2_cont","page":"2: Frictional Oscillator","title":"Continuation","text":"","category":"section"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"Finally we're ready to do the continuation so we setup the system as before: initialize continuation parameters and setup the initial guess. Then we invoke CONTINUATE to compute the solutions and then arrange the harmonics in complex notation for plotting.","category":"page"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"Om0 = 0.02pars.w0;\nOm1 = 2pars.w0;\ndOm = 0.04pars.w0;\ncpars = (parm=:riks, nmax=300, Dsc=:auto, minDsc=1e-2);\n\nHARMONICSTIFFNESS!(E, nothing, 1.0, 2pars.z0*pars.w0, pars.w0^2+pars.kt, Om0, h);\nU0 = E\\ (Fl*pars.F);\n\nsols, its, dss, xis, Dsc = CONTINUATE(U0, fun, [Om0, Om1], dOm; cpars...);\n\nuh = zeros(Complex, maximum(h)+1, length(sols));\nuh[h.+1, :] = hcat([[s.up[zinds]; s.up[rinds]+1im*s.up[iinds]] for s in sols]...);\nOms = [s.up[end] for s in sols];\nnothing #hide","category":"page"},{"location":"b2_jenkhb/#exb2_plot","page":"2: Frictional Oscillator","title":"Plotting","text":"","category":"section"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"Here again, we visualize the harmonic contents. Unlike the previous example, a very clear non-smooth behavior can be noticed here. It is only near the resonance, when amplitude is large, where the higher harmonics show up. At other frequencies, the higher harmonics are all zero.","category":"page"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"his = [1, 3, 5];\n\nfsz = 24;\nfig = Figure(fontsize=fsz, size=(1000, 600));\n\nax1s = [];\nax2s = [];\nfor i in eachindex(his[his.<=maximum(h)])\n    ax = Axis(fig[1, i],\n        ylabel=L\"$H_%$(his[i])$ Response (m)\", yscale=log10);\n    scatterlines!(ax, Oms, abs.(uh[his[i].+1, :]));\n    push!(ax1s, ax)\n\n    ax = Axis(fig[2, i], xlabel=L\"Excitation Frequency $\\Omega$\",\n        ylabel=L\"$H_%$(his[i])$ Phase (rad)\");\n    scatterlines!(ax, Oms, unwrap(angle.(uh[his[i].+1, :])));\n    push!(ax2s, ax)\nend\nlinkxaxes!(vcat(ax1s, ax2s)...)\n\n    fig","category":"page"},{"location":"b2_jenkhb/#exb2_outro","page":"2: Frictional Oscillator","title":"Outro","text":"","category":"section"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"This is yet another example of using the utility functions in HARMONIC for conducting harmonic balance. Looking at Example b1 and this, it must be clear that a lot of the \"setup\" that has to be done for any given system is very similar. So it makes sense to have a unified interface which constructs the different residue functions for a given system with its nonlinearity. This is precisely what the MDOFUTILS module sets out to do.","category":"page"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"","category":"page"},{"location":"b2_jenkhb/","page":"2: Frictional Oscillator","title":"2: Frictional Oscillator","text":"This page was generated using Literate.jl.","category":"page"},{"location":"c2_mdofgen_hystnl/#ex_c2","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"Example C2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"","category":"section"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"Much like Examples B1 and B2, this builds off of Example C1 to conduct the forced response analysis of a 2DoF oscillator with a hysteretic support.","category":"page"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"The dynamical system that will be studied here is:","category":"page"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"underbracebeginbmatrix 1001 endbmatrix_mxM beginbmatrix ddotx_1 ddotx_2 endbmatrix +\nleft( 001 mxM + 0001 mxKright) beginbmatrix dotx_1 dotx_2 endbmatrix + underbracebeginbmatrix 2-1-12 endbmatrix_mxK beginbmatrix x_1x_2 endbmatrix + beginbmatrix 0 f_fr(x_2) endbmatrix = beginbmatrix 10 endbmatrixcosOmega t","category":"page"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"The steps followed in this file are the same as in Example C1, except for the fact that we will now specify that the nonlinearity type is :Hyst:","category":"page"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"First we specify the system under study in terms of its \"MCK\" matrices and the nonlinearities it contains.\nNext we setup the parameters for Harmonic Balance and setup the harmonic excitation vector.\nAnd that's it! We're ready to compute the forced responses and visualize the results.","category":"page"},{"location":"c2_mdofgen_hystnl/#Preamble:-Load-Packages","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"Preamble: Load Packages","text":"","category":"section"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"using GLMakie\nusing LinearAlgebra\nusing SparseArrays\nusing ForwardDiff\nusing NonlinearSolve\nusing DSP\n\nusing juliajim.HARMONIC\nusing juliajim.CONTINUATION\nusing juliajim.MDOFUTILS","category":"page"},{"location":"c2_mdofgen_hystnl/#exc2_setup","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"System Setup","text":"","category":"section"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"We provide the MCK matrices just as before.","category":"page"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"M = I(2);\nK = [2 -1;-1 2];\nC = 0.01*M+0.001*K;\n\nmdl = MDOFGEN(M, C, K);\nnothing #hide","category":"page"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"For the nonlinearity setup the signature of the nonlinear force is different (read the documentation of ADDNL), now conducting incremental evaluation and making explicit reference to the displacement and force at the previous step(s). This is added to the MDOFGEN model the same way as before, using the ADDNL routine.","category":"page"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"# Nonlinearity\nkt = 1.0;\nfs = 1.0;\nfnl = (t,u,up,fp)-> if all(abs.(fp+kt*(u-up)).<fs)\n    return fp+kt*(u-up), kt*ones(size(u)), -kt*ones(size(u)), ones(size(u)); else\n        return fs*sign.(fp+kt*(u-up)), zeros(size(u)), zeros(size(u)), zeros(size(u));\nend\nL = [0.0 1.0];\n\nmdl = ADDNL(mdl, :Hyst, fnl, L);\nnothing #hide","category":"page"},{"location":"c2_mdofgen_hystnl/#exc2_hbsetup","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"Setup HB","text":"","category":"section"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"We setup the HB, test nonlinear force evaluation through NLEVAL!, and test the HB residue.","category":"page"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"h = 0:5;\nN = 256;\nt = (0:N-1)*2Ï€/N;\n\nNhc = sum(all(h.==0, dims=2) + 2any(h.!=0, dims=2));\n\n_, _, zinds, rinds, iinds = HINDS(mdl.Ndofs, h)\nFl = zeros(Nhc*mdl.Ndofs);\nFl[rinds[1]] = 1.0;\n\nWst = 0.6;\nE, dEdw = HARMONICSTIFFNESS(mdl.M, mdl.C, mdl.K, Wst, h);\n\nUw0 = [E\\Fl; Wst];\nnothing #hide","category":"page"},{"location":"c2_mdofgen_hystnl/#exc2_nleval","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"Evaluate the Nonlinear Forces","text":"","category":"section"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"FNL = zeros(mdl.Ndofs*Nhc);\ndFNLdU = zeros(mdl.Ndofs*Nhc, mdl.Ndofs*Nhc);\ndFNLdw = zeros(mdl.Ndofs*Nhc);\nNLEVAL!(2Uw0, mdl, h, N; FNL=FNL, dFNLdU=dFNLdU, dFNLdw=dFNLdw)","category":"page"},{"location":"c2_mdofgen_hystnl/#exc2_testhb","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"Test HB Residue","text":"","category":"section"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"R = zeros(mdl.Ndofs*Nhc);\ndRdU = zeros(mdl.Ndofs*Nhc, mdl.Ndofs*Nhc);\ndRdw = zeros(mdl.Ndofs*Nhc);\nHBRESFUN!(Uw0, mdl, Fl, h, N; R=R, dRdU=dRdU, dRdw=dRdw)\n\nFamp = 1.0;\n\nfun = NonlinearFunction((r,u,p)->HBRESFUN!([u;p], mdl, Famp*Fl, h, N; R=r),\n    jac=(J,u,p)->HBRESFUN!([u;p], mdl, Famp*Fl, h, N; dRdU=J),\n    paramjac=(Jp,u,p)->HBRESFUN!([u;p], mdl, Famp*Fl, h, N; dRdw=Jp));\n\nprob = NonlinearProblem(fun, Uw0[1:end-1], Uw0[end]);\nsol = solve(prob, show_trace=Val(true));\nnothing #hide","category":"page"},{"location":"c2_mdofgen_hystnl/#exc2_cont","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"Continuation","text":"","category":"section"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"Also like before, we do the continuation to compute the full forced response curve.","category":"page"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"Note that the code in the last two sections (Setup HB and Continuation) are identical to their counterparts in Example C1. This is what juliajim is all about - the analysis is abstracted enough that the code should look nearly the same except for the setup of the nonlinearity.","category":"page"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"Om0 = 0.1;\nOm1 = 3;\ndOm = 0.2;\ncpars = (parm=:arclength, nmax=1000, Dsc=:none);\n\nsols, its, dss, xis, Dsc = CONTINUATE(Uw0[1:end-1], fun, [Om0, Om1], dOm; cpars...);\n\nuh = zeros(Complex, maximum(h)+1, length(sols), 2);\nfor i in 1:2\n    uh[h.+1, :, i] = hcat([[s.up[zinds[i:2:end]];\n                            s.up[rinds[i:2:end]]+1im*s.up[iinds[i:2:end]]]\n                          for s in sols]...);\nend\nOms = [s.up[end] for s in sols];\nnothing #hide","category":"page"},{"location":"c2_mdofgen_hystnl/#exc2_plot","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"Plotting","text":"","category":"section"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"Just like before, we visualize the results. Notice, just like in Example B2 that the non-smooth behavior of the nonlinearity is very striking.","category":"page"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"his = [1, 3, 5];\n\nfsz = 24;\nfig = Figure(fontsize=fsz, size=(1000, 600));\n\nfor i in eachindex(his[his.<=maximum(h)])\n    ax = Axis(fig[1, i],\n              ylabel=L\"$H_%$(his[i])$ Response (m)\", yscale=log10);\n    lines!(ax, Oms, abs.(uh[his[i].+1, :, 1]), label=\"x1\");\n    lines!(ax, Oms, abs.(uh[his[i].+1, :, 2]), label=\"x2\");\n\n    ax = Axis(fig[2, i], xlabel=L\"Excitation Frequency $\\Omega$\",\n              ylabel=L\"$H_%$(his[i])$ Phase (rad)\");\n    lines!(ax, Oms, unwrap(angle.(uh[his[i].+1, :, 1])), label=\"x1\");\n    lines!(ax, Oms, unwrap(angle.(uh[his[i].+1, :, 2])), label=\"x2\");\nend\n\n    fig","category":"page"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"","category":"page"},{"location":"c2_mdofgen_hystnl/","page":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","title":"2: Forced Response of a 2DoF Oscillator with Hysteretic Nonlinearity","text":"This page was generated using Literate.jl.","category":"page"},{"location":"a_hworld/#ex_a","page":"A: Harmonic Utilities","title":"Example A: Introduction to the AFT Routines","text":"","category":"section"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"This example is intended to showcase the Alternating Frequency Time (AFT) routines in juliajim.HARMONIC.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"At its core, it is just a bunch of utility routines that allow time-to-frequency and frequency-to-time transformations. These can also be used for Chebyshev polynomial expansions, as will be seen below.","category":"page"},{"location":"a_hworld/#Preamble:-Load-the-necessary-packages","page":"A: Harmonic Utilities","title":"Preamble: Load the necessary packages","text":"","category":"section"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"using GLMakie\nusing LinearAlgebra\nusing SparseArrays\nusing Arpack\n\nusing juliajim.HARMONIC","category":"page"},{"location":"a_hworld/#Alternating-Frequency-Time-Transformation","page":"A: Harmonic Utilities","title":"Alternating Frequency Time Transformation","text":"","category":"section"},{"location":"a_hworld/#AFT-Single-Frequency-(Periodic-signal)","page":"A: Harmonic Utilities","title":"AFT - Single Frequency (Periodic signal)","text":"","category":"section"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"Here we will use the AFT routine to do a Fourier transform of a time-domain signal, yt, to compute its Fourier coefficients, yf. The general form assumed for a Fourier series is:","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"y = a_0 + sum_n=1^H a_n cos ntau + sin ntau","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"where (\\tau) is the scaled time such that the signal y(tau) is 2pi-periodic. For instance, if the excitation frequency is Omega and physical time is t (such that we have 2piOmega as the time period), the scaled time coordinate tau is defined as tau=Omega t.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"The AFT routine provides a convenience utility for transforming from a discrete time array to an array of the Fourier coefficients which is written as","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"beginbmatrix a_0  a_1  b_1  a_2  b_2  dots endbmatrix","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"The same routine may also be used to do the opposite transformation (frequency coefficients to time array).","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"We first discretize time by dividing the domain 0 2pi into 128 parts.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"N = 128;\nt = (0:N-1)*2Ï€/N;\n# yt = cos.(t) + 3sin.(2t) .+ 4;\nyt = cos.(t) .+ 2;\nyt = [yt yt];\nnothing #hide","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"We have put two copies of the vector yt in columns to expose the fact that the AFT routine is vectorized: Having time series in M columns will return corresponding Fourier coefficients in M columns.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"Now we set the list of harmonics of interest. This can also be an unordered list, but if you're including the zeroth harmonic, that should always be the first.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"h = 0:3\nNhc = sum(all(h.==0, dims=2) + 2*any(h .!= 0, dims=2));\nnothing #hide","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"The variable Nhc is the number of harmonic coefficients. For the zeroth harmonics we have only one coefficient ((a0) above) and for every non-zero harmonic we have two, correponding to the sine and cosine ((ai,b_i) above). The formula above looks more complicated than it must because this works even for the multi-frequency case.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"Now we call the actual AFT routine. The first argument is the time series vector (or matrix of column vectors), the second argument is the harmonic indices of interest, third is the number of AFT samples (when inputting the time vector N has to be the same as the number of rows of yt), and the last argument is a Symbol. The last argument specifies if we're interested in a time-to-frequency (:t2f) or frequency-to-time (:f2t) transformation.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"yf = AFT(yt, h, N, :t2f);  # Time to Frequency\nYT = AFT(yf, h, N, :f2t);  # Frequency to Time\nnothing #hide","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"yf is the list of harmonics and YT is the time vector reconstructed from the harmonics. You should be able to verify that yt and YT are numerically the same.","category":"page"},{"location":"a_hworld/#AFT-2-Frequency-Case-(Quasi-periodic-signal)","page":"A: Harmonic Utilities","title":"AFT - 2 Frequency Case (Quasi-periodic signal)","text":"","category":"section"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"Now we show how the same AFT routine can be used for multi-frequency Fourier representations. Our Fourier series representation is written as","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"y(t) = a_0 + sum_n=1^H a_n cos( h1_n tau_1 + h2_n tau_2) + b_n sin( h1_n tau_1 + h2_ntau_2 )textwith  tau_i = Omega_i t","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"Here, (h1, h2) are index arrays storing the harmonic coefficient corresponding to the two frequencies present. The scaled time coordinates (aka Torus coordinates) (\\tau1,\\tau2) are defined as above such that the signal y(t) can be written as the torus function Y(\\tau_1,\\tau_2), which is periodic on the 2D domain. Note that y(t) and Y(tau_1 tau_2) are not the same, although we can reconstruct (y(t)) from (Y(\\tau1,\\tau2)).","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"The usage of the routine is identical to before.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"ts = Iterators.product(t, t);\nyt = [cos(t1)+3sin(t2)+4 for (t1,t2) in ts];\nh = [0 0;1 0;0 1;1 1];\n\nyf = AFT([yt[:] yt[:]], h, N, :t2f);\nYT = AFT(yf, h, N, :f2t);\nyf","category":"page"},{"location":"a_hworld/#Convenience-Routine-for-Harmonic-Selection:-[HSEL](@ref)","page":"A: Harmonic Utilities","title":"Convenience Routine for Harmonic Selection: HSEL","text":"","category":"section"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"Since harmonic selection in the 2D (and general N-D) case is not as trivial as writing 0:3 for the 1D case (different combinations of the indices must be considered on the tensor-grid while accounting for redundancies. The convenience routine HSEL helps to do this - one can specify the maximum harmonic order (Nhmax below) and the number of components (C below) and obtain a (H\\times C) matrix of indices.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"C = 2;\nNhmax = 4;\n\nh = HSEL(Nhmax, 1:C);  # Second argument is the list of frequencies\nNhc = sum(all(h.==0, dims=2) + 2*any(h .!= 0, dims=2));\nnothing #hide","category":"page"},{"location":"a_hworld/#Convenient-Routine-for-Harmonic-Indices:-[HINDS](@ref)","page":"A: Harmonic Utilities","title":"Convenient Routine for Harmonic Indices: HINDS","text":"","category":"section"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"It is often necessary to also know the indices of the cosine and sine harmonics individually. The HINDS routine helps with this.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"h = (0:4);\nzinds, hinds, rinds0, rinds, iinds = HINDS(1, h)","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"Here, zinds and hinds store the indices that have to be used for a complex representation ((\\begin{bmatrix} a0&a1-ib1&a2-ib_2&\\dots \\end{bmatrix})) and rinds0, rinds, and iinds store the indices \\hat{t} have to be used for the real Fourier coefficients representation. Specifically, rinds0 are the indices for the zeroth harmonic, rinds are the indices for the cosine harmonics and iinds are the indices for the sine harmonics.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"The routine can also be called when there are multiple Degrees-of-Freedom. See below for the case of 3 DoFs. This should also clarify the ordering convention used in this package.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"h = (0:4);\nzinds, hinds, rinds0, rinds, iinds = HINDS(3, h)","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"Note that the routine also supports multi-frequency cases (h with multiple columns).","category":"page"},{"location":"a_hworld/#The-\"Harmonic\"-Stiffness","page":"A: Harmonic Utilities","title":"The \"Harmonic\" Stiffness","text":"","category":"section"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"Harmonic Balance is a numerical technique where the solution for a dynamical system (expressed in second order form) is expressed in terms of its Fourier series. The resulting algebraic system is solved numerically. For a linear system, however, the algebraic system can be simplified significantly and written in a succinct (\\mx{E} \\vc{u} = \\vc{f}) form.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"Consider a linear dynamical system with (n) Degrees-of-Freedom of the form:","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"mxM ddotvcx + mxC dotvcx + mxK vcx = vcF(t)quad vcxinmathbbR^n","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"We expand out the vector of unknowns (\\vc{x}) as","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"vcx = vca_0 + sum_n=1^H vca_n cos ntau + vcb_n sin ntautextwith  vca_ivcb_iin mathbbR^n","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"and write the vector of harmonic coefficients (\\vc{u}) as","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"vcu = beginbmatrix vca_0 vca_1 vcb_1 vca_2 vcb_2 vdots endbmatrix","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"Substituting the harmonic ansatz into the governing equations and projecting the resulting residue onto the Fourier basis functions leads to:","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"beginbmatrix\nmxK  \nmxK-Omega^2 mxM  Omega mxC  \n-Omega mxC  mxK-Omega^2 mxM \nmxK-(2Omega)^2 mxM  (2Omega) mxC\n -(2Omega) mxC  mxK-(2Omega)^2 mxM \nddots\nendbmatrix\nbeginbmatrix vca_0 vca_1 vcb_1 vca_2 vcb_2 vdots endbmatrix =\nbeginbmatrix vcf_a0 vcf_a1 vcf_b1 vcf_a2 vcf_b2 vdots endbmatrix","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"The HARMONICSTIFFNESS function provides a convenience routine for just this. It works for arbitrary number of frequency components also. The usage is as follows. Since the frequency jacobian of this matrix is often necessary, this is also returned by the routine. There is also an in-place version of this in HARMONICSTIFFNESS!.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"M = I(2);\nK = [2 -1;-1 2];\nD = 0.001.*K + 0.01.*M;\n\nC = 2;\nNhmax = 3;\n\nh = HSEL(Nhmax, 1:C)\nws = [1, Ï€];\nws = ws[1:C];\n\nE, dEdw = HARMONICSTIFFNESS(M, D, K, ws, h);\nE","category":"page"},{"location":"a_hworld/#Forced-Response-Computation-with-[HARMONIC](@ref)","page":"A: Harmonic Utilities","title":"Forced Response Computation with HARMONIC","text":"","category":"section"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"We shall now use the above utilites to compute the forced response of a linear system. The code below should be self explanatory.","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"C = 1;\nNhmax = 3;\n\nh = HSEL(Nhmax, 1:C);\nNhc = sum(all(h.==0, dims=2) + 2*any(h .!= 0, dims=2));\nFl = zeros(Nhc, 1);\nFl[2] = 1.0;\nFl = kron(Fl, [1;0]);\n\nOmr, V = eigen(K, collect(M));\nOmr = sqrt.(Omr);\n\nÎ©s = LinRange(0.5, 2, 500);\nAs = zeros(ComplexF64, size(Î©s));\n\nfor i = eachindex(Î©s)\n    local E, dEdw\n    E, dEdw = HARMONICSTIFFNESS(M, D, K, [Î©s[i]], h);\n    U = E\\Fl;\n    As[i] = U[3]+im*U[5];\nend\n\nset_theme!(theme_latexfonts())\nfsz = 18;\nfig = Figure(fontsize=fsz);\n\nax = Axis(fig[1, 1],\n    xlabel=\"Excitation Frequency (rad/s)\",\n    ylabel=\"Response Amplitude (m)\",\n    xscale=Makie.pseudolog10,\n    yscale=Makie.pseudolog10);\nlines!(ax, Î©s, abs.(As))\n\n    fig","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"","category":"page"},{"location":"a_hworld/","page":"A: Harmonic Utilities","title":"A: Harmonic Utilities","text":"This page was generated using Literate.jl.","category":"page"},{"location":"c1_mdofgen_instnl/#ex_c1","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"Example C1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"","category":"section"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"This example is designed to expose the core features of the MDOFUTILS module. As already noted in Example b2, much of the setup while doing these analyses are very repetitive and common. MDOFUTILS abstracts much of this so the user can focus on the dynamics.","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"The dynamical system that will be studied here is:","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"underbracebeginbmatrix 1001 endbmatrix_mxM beginbmatrix ddotx_1 ddotx_2 endbmatrix +\nleft( 001 mxM + 0001 mxKright) beginbmatrix dotx_1 dotx_2 endbmatrix + underbracebeginbmatrix 2-1-12 endbmatrix_mxK beginbmatrix x_1x_2 endbmatrix + beginbmatrix 0 beta x_2^3 endbmatrix = beginbmatrix 10 endbmatrixcosOmega t","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"The steps followed in this file are:","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"First we specify the system under study in terms of its \"MCK\" matrices and the nonlinearities it contains.\nNext we setup the parameters for Harmonic Balance and setup the harmonic excitation vector.\nAnd that's it! We're ready to compute the forced responses and visualize the results.","category":"page"},{"location":"c1_mdofgen_instnl/#Preamble:-Load-Packages","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"Preamble: Load Packages","text":"","category":"section"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"using GLMakie\nusing LinearAlgebra\nusing SparseArrays\nusing ForwardDiff\nusing NonlinearSolve\nusing DSP\n\nusing juliajim.HARMONIC\nusing juliajim.CONTINUATION\nusing juliajim.MDOFUTILS","category":"page"},{"location":"c1_mdofgen_instnl/#exc1_setup","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"System Setup","text":"","category":"section"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"We specify the linear \"MCK\" matrices of the system here. Also check out the documentation for the MDOFGEN struct.","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"M = I(2);\nK = [2 -1;-1 2];\nC = 0.01*M+0.001*K;\n\nmdl = MDOFGEN(M, C, K);\nnothing #hide","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"Next we specify the nonlinearity using a function handle. This function handle must take 3 input arguments (time, displacement, velocity) and output 3 results (force, displacement derivative, velocity derivative). Although the nonlinearity is a simple spring here, this same routine also supports more complicated nonlinearities involving multiple degrees of freedom. In such cases, u,ud must be an (N\\times d) matrix where (N) is the number of time samples and (d) is the number of nonlinear degrees-of-freedom. It should also return d forces (for adjoint forcing).","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"Along with this, we also specify a \"selector matrix\" (\\mx{L}) such that the nonlinear DoFs are (\\mx{L}\\vc{u}) when (\\vc{u}) is the vector of all the DoFs.","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"# Nonlinearity\nÎ² = 0.1;\nfnl = (t,u,ud)->return Î².*u.^3, 3Î².*u.^2, zeros(size(u));;\nL = [0.0 1.0];\nnothing #hide","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"We \"add\" the nonlinearity to the MDOFGEN object (mdl here) using the ADDNL routine. The second argument here specifies that the nonlinearity can be evaluated \"instantaneously\", like a cubic spring (UNlike a Jenkins element, as in Example b2. ADDNL also supports non-self adjoint forcing - check its documentation for this. Under the hood, this creates an object of the NONLINEARITY struct and pushes it into the field NLTs (which is a vector of NONLINEARITY objects) of the MDOFGEN object. Each NONLINEARITY object contains a type, the force evaluation function and a DoF selection (and force distribution) matrix.","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"mdl = ADDNL(mdl, :Inst, fnl, L);\nnothing #hide","category":"page"},{"location":"c1_mdofgen_instnl/#exc1_hbsetup","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"Setup HB","text":"","category":"section"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"Next we setup the harmonics necessary and the number of time samples to use per period for the Alternating Frequency Time (AFT) step. We setup the excitation vector in the frequency domain by using the indices returned by HINDS - we set Fl to be non-zero at the first cosine harmonic index, which will correspond to the first harmonic of the first DoF.","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"h = 0:5;\nN = 128;\nt = (0:N-1)*2Ï€/N;\n\nNhc = sum(all(h.==0, dims=2) + 2any(h.!=0, dims=2));\n\n_, _, zinds, rinds, iinds = HINDS(mdl.Ndofs, h)\nFl = zeros(Nhc*mdl.Ndofs, 1);\nFl[rinds[1]] = 1.0;\n\nWst = 0.6;\nE, dEdw = HARMONICSTIFFNESS(mdl.M, mdl.C, mdl.K, Wst, h);\n\nUw0 = [E\\Fl; Wst];\nnothing #hide","category":"page"},{"location":"c1_mdofgen_instnl/#exc1_nleval","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"Evaluate the Nonlinear Forces","text":"","category":"section"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"The NLEVAL! routine is defined in MDOFUTILS. This uses the appropriate methodology to evaluate each nonlinearity that has been added to the given MDOFGEN model. The function is written in the in-place evaluation for efficiency. The routine directly just returns the nonlinear force harmonics (FNL here).","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"FNL = zeros(mdl.Ndofs*Nhc);\ndFNLdU = zeros(mdl.Ndofs*Nhc, mdl.Ndofs*Nhc);\ndFNLdw = zeros(mdl.Ndofs*Nhc);\nNLEVAL!(Uw0, mdl, h, N; FNL=FNL, dFNLdU=dFNLdU, dFNLdw=dFNLdw);\nFNL","category":"page"},{"location":"c1_mdofgen_instnl/#exc1_testhb","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"Test HB Residue","text":"","category":"section"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"HBRESFUN! implements the Harmonic Balance forced response residue. This can be used in the same way that the RESFUN! functions were used in Example b1 and Example b2 for forced response evaluation.","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"R = zeros(mdl.Ndofs*Nhc);\ndRdU = zeros(mdl.Ndofs*Nhc, mdl.Ndofs*Nhc);\ndRdw = zeros(mdl.Ndofs*Nhc);\nHBRESFUN!(Uw0, mdl, Fl, h, N; R=R, dRdU=dRdU, dRdw=dRdw)\n\nfun = NonlinearFunction((r,u,p)->HBRESFUN!([u;p], mdl, Fl, h, N; R=r),\n    jac=(J,u,p)->HBRESFUN!([u;p], mdl, Fl, h, N; dRdU=J),\n    paramjac=(Jp,u,p)->HBRESFUN!([u;p], mdl, Fl, h, N; dRdw=Jp));\n\nprob = NonlinearProblem(fun, Uw0[1:end-1], Uw0[end]);\nsol = solve(prob, show_trace=Val(true));\nnothing #hide","category":"page"},{"location":"c1_mdofgen_instnl/#exc1_cont","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"Continuation","text":"","category":"section"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"HBRESFUN! can also be used in tandem with CONTINUATE for getting the full forced response.","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"Om0 = 0.1;\nOm1 = 3;\ndOm = 0.01;\ncpars = (parm=:arclength, nmax=2000, Dsc=:auto, minDsc=1e-5);\n\nsols, its, dss, xis, Dsc = CONTINUATE(Uw0[1:end-1], fun, [Om0, Om1], dOm; cpars...);\n\nuh = zeros(Complex, maximum(h)+1, length(sols), 2);\nfor i in 1:2\n    uh[h.+1, :, i] = hcat([[s.up[zinds[i:2:end]];\n                            s.up[rinds[i:2:end]]+1im*s.up[iinds[i:2:end]]]\n                          for s in sols]...);\nend\nOms = [s.up[end] for s in sols];\nnothing #hide","category":"page"},{"location":"c1_mdofgen_instnl/#exc1_plot","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"Plotting","text":"","category":"section"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"Now we plot the response harmonics. It can be seen that two primary and 3 secondary (super harmonic) resonances have been picked up. The nonlinearity level is quite strong, as evidenced by the non-trivial shapes of the response curves.","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"his = [1, 3, 5];\n\nfsz = 24;\nfig = Figure(fontsize=fsz, size=(1000, 600));\n\nfor i in eachindex(his[his.<=maximum(h)])\n    ax = Axis(fig[1, i],\n        ylabel=L\"$H_%$(his[i])$ Response (m)\", yscale=log10);\n    lines!(ax, Oms, abs.(uh[his[i].+1, :, 1]), label=\"x1\");\n    lines!(ax, Oms, abs.(uh[his[i].+1, :, 2]), label=\"x2\");\n\n    ax = Axis(fig[2, i], xlabel=L\"Excitation Frequency $\\Omega$\",\n        ylabel=L\"$H_%$(his[i])$ Phase (rad)\");\n    lines!(ax, Oms, unwrap(angle.(uh[his[i].+1, :, 1])), label=\"x1\");\n    lines!(ax, Oms, unwrap(angle.(uh[his[i].+1, :, 2])), label=\"x2\");\nend\n\n    fig","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"","category":"page"},{"location":"c1_mdofgen_instnl/","page":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","title":"1: Forced Response of a 2DoF Oscillator with Instantaneous Nonlinearity","text":"This page was generated using Literate.jl.","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"reference/#Main-Module","page":"Reference","title":"Main Module","text":"","category":"section"},{"location":"reference/#juliajim.juliajim","page":"Reference","title":"juliajim.juliajim","text":"The main juliajim module\n\n\n\n\n\n","category":"module"},{"location":"reference/#Module-Harmonic","page":"Reference","title":"Module Harmonic","text":"","category":"section"},{"location":"reference/#juliajim.HARMONIC","page":"Reference","title":"juliajim.HARMONIC","text":"Useful routines for Harmonic Balance. Also includes Chebyshev Galerkin utilites.\n\n\n\n\n\n","category":"module"},{"location":"reference/#juliajim.HARMONIC.ACT-NTuple{4, Any}","page":"Reference","title":"juliajim.HARMONIC.ACT","text":"ACT(yin, h::hTypes, N::Int64, dir::Symbol)\n\nRoutine for the alternating Chebyshev Transform. Uses AFT internally. \n\nArguments\n\nyin              : \nh::hTypes : \nN::Int64         : \ndir::Symbol      : \n\n\n\n\n\n","category":"method"},{"location":"reference/#juliajim.HARMONIC.AFT-NTuple{4, Any}","page":"Reference","title":"juliajim.HARMONIC.AFT","text":"AFT(yin, h::hTypes, N::Int64, dir::Symbol);\n\nRoutine to conduct Time-to-Frequency and Frequency-to-Time transforms for the general Multi frequency case.\n\nArguments\n\nyin::VecOrMat{Float64}: (N^C, Ny) if time data, and (Nhc, Ny) if frequency data.\nh::hTypes: (Nh, C) list of harmonics.\nN::Int64: Number of time samples for AFT.\ndir::Symbol: :t2f for time-to-frequency, and :f2t for frequency-to-time.\n\nExamples\n\nSingle Frequency Case:\n\n    N = 8;\n    t = (0:N-1)*2Ï€/N;\n    yt = cos.(t) + 3sin.(2t) .+ 4;\n    yt = [yt yt];\n\n    h = collect(0:3)[:,:];\n    Nhc = sum(all(h.==0, dims=2) + 2*any(h .!= 0, dims=2));\n\n    yf = AFT(yt, h, N, :t2f);\n    YT = AFT(yf, h, N, :f2t);\n\n2-Frequency Case:\n\n    t1 = repeat(t, 1, N);\n    t2 = repeat(t', N, 1);\n\n    yt = cos.(t1) + 3sin.(t2) .+ 4;\n    h = [0 0;1 0;0 1;1 1];\n    Nhc = sum(all(h.==0, dims=2) + 2*any(h .!= 0, dims=2));\n\n    yf = AFT([yt[:] yt[:]], h, N, :t2f);\n    YT = AFT(yf, h, N, :f2t);\n\n\n\n\n\n","category":"method"},{"location":"reference/#juliajim.HARMONIC.DCHEB-Tuple{Union{Int64, AbstractRange{Int64}, VecOrMat{Int64}}}","page":"Reference","title":"juliajim.HARMONIC.DCHEB","text":"DCHEB(h::hTypes)\n\nReturns the Chebyshev Differentiation matrix.\n\nArguments\n\nh::hTypes : \n\n\n\n\n\n","category":"method"},{"location":"reference/#juliajim.HARMONIC.DFOUR","page":"Reference","title":"juliajim.HARMONIC.DFOUR","text":"DFOUR(h::hTypes, ws=nothing)\n\nReturns the Fourier differentiation matrix (useful for HB representations).\n\nArguments\n\nh::hTypes : (H, C) Harmonic indices\nws::Array{Float64} : (C, 1) (optional) list of frequencies\n\nOutputs\n\nD : (Nhc, Nhc) Harmonic differentiation matrix\ndDdw : (Nhc, Nhc) Harmonic differentiation matrix (derivative wrt ws).\n\n\n\n\n\n","category":"function"},{"location":"reference/#juliajim.HARMONIC.DFOUR!","page":"Reference","title":"juliajim.HARMONIC.DFOUR!","text":"DFOUR!(h::hTypes, D, dDdw=nothing, ws=nothing)\n\nBang version of DFOUR.\n\nArguments\n\nh::hTypes : (H, C) Harmonic indices\nD : (Nhc, Nhc) Harmonic differentiation matrix\ndDdw : (Nhc, Nhc) Harmonic differentiation matrix (derivative wrt ws).\nws::Array{Float64} : (C, 1) (optional) list of frequencies\n\n\n\n\n\n","category":"function"},{"location":"reference/#juliajim.HARMONIC.FSEVAL","page":"Reference","title":"juliajim.HARMONIC.FSEVAL","text":"FSEVAL(h::hTypes, t::Union{StepRangeLen{Float64}, VecOrMat{Float64}}, U::Union{Nothing,Matrix{Float64}}=nothing)\n\nDescription\n\nEvaluates the Fourier series at required time points. If Fourier coefficients are not provided, it returns the mapping matrix.\n\nArguments\n\nh::hTypes                      : \nt::Union{StepRangeLen{Float64} : \nVecOrMat{Float64}}             : \nU::Union{Nothing               : \nMatrix{Float64}}               : (default nothing)\n\nOutputs\n\nut\t: In case U is provided, this is outputted first.\nJ\t: The mapping matrix such that J*U gives the desired temporal evaluates.\n\n\n\n\n\n","category":"function"},{"location":"reference/#juliajim.HARMONIC.HARMONICSTIFFNESS!-NTuple{7, Any}","page":"Reference","title":"juliajim.HARMONIC.HARMONICSTIFFNESS!","text":"HARMONICSTIFFNESS!(E, dEdw, M, D, K, ws, h)\n\nBang version of HARMONICSTIFFNESS (preallocate E, dEdw).\nAdvantage is that nothing can be passed to avoid needless computations.\n\nArguments\n\nE: (NdNhc, NdNhc) Harmonic Stiffness\ndEdw: C-Vector of (NdNhc, NdNhc) Representing Frequency-gradients of E\n'M, D, K': (Nd,Nd) Mass, Damping, Stiffness Matrices.\n'ws::Array{Float64}': (C,1) list of frequencies\n'h': (H, C) harmonic indices\n\nExamples\n\nSingle Frequency Case\n\nM = I(2);\nK = [2 -1;-1 2];\nD = 0.001.*K + 0.01.*M;\n\nh = [0;1;2;3];\nNhc = sum(all(h.==0, dims=2) + 2*any(h .!= 0, dims=2));\nE = zeros(2*Nhc, 2*Nhc);\ndEdw = zeros(2*Nhc, 2*Nhc);\nws = 1;\nHARMONICSTIFFNESS!(E, dEdw, M, D, K, ws, h);\n\n2-Frequency Case\n\nNhmax = 3;\nws = [1; Ï€];\nh = HSEL(Nhmax, ws);\nNhc = sum(all(h.==0, dims=2) + 2*any(h .!= 0, dims=2));\nE = zeros(2*Nhc, 2*Nhc);\ndEdw = zeros(2*Nhc, 2*Nhc);\nHARMONICSTIFFNESS!(E, dEdw, M, D, K, ws, h);\n\n\n\n\n\n","category":"method"},{"location":"reference/#juliajim.HARMONIC.HARMONICSTIFFNESS-NTuple{5, Any}","page":"Reference","title":"juliajim.HARMONIC.HARMONICSTIFFNESS","text":"HARMONICSTIFFNESS(M, D, K, ws::Array{Float64}, h)\n\nComputes the harmonic stiffness for HB simulations.\n\nArguments\n\n'M, D, K': (Nd,Nd) Mass, Damping, Stiffness Matrices.\n'ws::Array{Float64}': (C,1) list of frequencies\n'h': (H, C) harmonic indices\n\nOutputs\n\nE: (NdNhc, NdNhc) Harmonic Stiffness\ndEdw: C-Vector of (NdNhc, NdNhc) Representing Frequency-gradients of E\n\nExamples\n\nSingle Frequency Case\n\nM = I(2);\nK = [2 -1;-1 2];\nD = 0.001.*K + 0.01.*M;\n\nh = [0;1;2;3];\nws = 1;\nE, dEdw = HARMONICSTIFFNESS(M, D, K, ws, h);\n\n2-Frequency Case\n\nNhmax = 3;\nws = [1; Ï€];\nh = HSEL(Nhmax, ws);\nE, dEdw = HARMONICSTIFFNESS(M, D, K, ws, h);\n\n\n\n\n\n","category":"method"},{"location":"reference/#juliajim.HARMONIC.HINDS-Tuple{Int64, Union{Int64, AbstractRange{Int64}, VecOrMat{Int64}}}","page":"Reference","title":"juliajim.HARMONIC.HINDS","text":"HINDS(Ndofs::Int64, h::hTypes)\n\nArguments\n\nNdofs::Int64     : \nh::hTypes :\n\nOutputs\n\nzinds\nhinds\nrinds0\nrinds\niinds\n\n\n\n\n\n","category":"method"},{"location":"reference/#juliajim.HARMONIC.HSEL","page":"Reference","title":"juliajim.HARMONIC.HSEL","text":"HSEL(Nhmax::Int64, ws::Any=1, hcr::Int=1)\n\nSelection of Harmonic indices based on different criteria. First C+1 rows are [zeros(1,C); I(C)].\n\nImplemented criteria are,\n\nhcr=1: Î£áµ¢ |háµ¢| < Nhmax & âˆ‘áµ¢ h_i â‰¥ 0\n\nArguments\n\nNhmax::Int64: Max harmonic for truncation.\nws=1: [opt] List of frequencies\nhcr::Int=1: [opt] Truncation criterion. See above.\n\nExamples\n\nC = 2;\nNhmax = 3;\n\nh = HSEL(Nhmax, 1:C)\n\n\n\n\n\n","category":"function"},{"location":"reference/#juliajim.HARMONIC.PRODMAT_CHEB","page":"Reference","title":"juliajim.HARMONIC.PRODMAT_CHEB","text":"Description\n\nArguments\n\nU    : \nh    : \nHmax : (default nothing)\nD    : (default nonothing)\nL    : (default nonothing)\n\n\n\n\n\n","category":"function"},{"location":"reference/#juliajim.HARMONIC.PRODMAT_FOUR","page":"Reference","title":"juliajim.HARMONIC.PRODMAT_FOUR","text":"PRODMAT_FOUR(U::VecOrMat{Float64}, h::hTypes, Hmax=nothing, D=nothing, L=nothing)\n\nDescription\n\nReturns the Fourier product matrix. Currently only implemented for C=1.\n\nArguments\n\nU::VecOrMat{Float64}\t\t: \nh::hTypes    \t\t\t: \nHmax \t\t\t\t: (default nothing)\nD    \t\t\t\t: (default nothing)\nLb   \t\t\t\t: (default nothing)\n\n\n\n\n\n","category":"function"},{"location":"reference/#Module-CONTINUATION","page":"Reference","title":"Module CONTINUATION","text":"","category":"section"},{"location":"reference/#juliajim.CONTINUATION","page":"Reference","title":"juliajim.CONTINUATION","text":"Useful types and routines for numerical continuation.\n\n\n\n\n\n","category":"module"},{"location":"reference/#juliajim.CONTINUATION.myNLSoln","page":"Reference","title":"juliajim.CONTINUATION.myNLSoln","text":"myNLSoln\n\nStruct storing the solution, Jacobian, and (unit) tangent.\n\nFields\n\nup::nvTypes: Solution point ([u;p])\nJ::nmTypes: Jacobian dr/du\nJp::nvTypes: Parameter Jacobian dr/dp\ndupds::nvTypes: Tangent vector (has to be vector only)  \n\n\n\n\n\n","category":"type"},{"location":"reference/#juliajim.CONTINUATION.myNLSoln-2","page":"Reference","title":"juliajim.CONTINUATION.myNLSoln","text":"myNLSoln(up::nvTypes=nothing; J::nmTypes=nothing, Jp::nvTypes=nothing)\n\nConstructor for myNLSoln. Can specify one or all the arguments (point, jacobian, paramjac).\n\nArguments\n\nup::nvTypes       : (default nothing) Solution point\nJ::nmTypes        : (default nothing) Jacobian\nJp::nvTypes       : (default nothing) paramjac\nsave_jacs::Bool   : (default false) Whether or not to store the Jacobians.\n\nIf both J and Jp are provided, the unit tangent dupds is computed using nullspace([J Jp])[:,1].\n\n\n\n\n\n","category":"type"},{"location":"reference/#Base.:--Tuple{myNLSoln, myNLSoln}","page":"Reference","title":"Base.:-","text":"Base.:-(v1::myNLSoln, v2::myNLSoln)\n\nOverloading the subtraction operator to take the difference between two myNLSoln \n\n\n\n\n\n","category":"method"},{"location":"reference/#Base.show-Tuple{IO, myNLSoln}","page":"Reference","title":"Base.show","text":"Base.show(io::IO, p::myNLSoln)\n\nOverloading base show function to display myNLSoln object.\n\n\n\n\n\n","category":"method"},{"location":"reference/#juliajim.CONTINUATION.CONTINUATE-Tuple{Vector{Float64}, Any, Vector{Float64}, Float64}","page":"Reference","title":"juliajim.CONTINUATION.CONTINUATE","text":"CONTINUATE(u0, fun, ps, dp; kwargs...)\n\nContinuation routine. Solves the bordered problem with residue drawn from EXTRESFUN!.\n\nArguments\n\nu0::Vector{Float64}                          : Initial guess for first point\nfun                                          : NonlinearFunction object. Will call:\nfun.f(du, u, p) for residue r. p must be scalar.\nfun.jac(J, u, p) for jacobian dr/du. Uses ForwardDiff.jacobian! if fun.jac is nothing.\nfun.paramjac(Jp, u, p) for jacobian dr/dp. Uses ForwardDiff.jacobian! if fun.paramjac is nothing.\nps::Vector{Float64}                          : Specify range of p for continuation.\ndp::Float64                                  : Specify first step in Î”p units. (will be rescaled if necessary)\n\nOptional Arguments\n\nparm::Symbol                                 : (default :arclength) Arclength parameterization. See EXTRESFUN!.\nnmax::Int64                                  : (default 1000) Maximum number of steps.\ndpbnds::Union{Nothing,Vector{Float64}}       : (default [dp/5,5dp]) Bounds for the step length dp. (Rescaled as appropriate)\nsave_jacs::Bool                              : (default false) Specify whether or not to save the Jacobians in the output. Only solution and (unit) tangent are saved if false.\nverbosity::Int                               : (default 1) Verbosity levels:\n0: Suppress all messages.\n1: Display Steps, Continuation Progress.\n2: Display Iteration Information for each step also.\n\nFor Scaling of Unknowns (recommended to get evenly spaced points on response curve)\n\nDsc::Union{Symbol,Nothing,Vector{Float64}}   : (default :none) \"Dscaling\" used to scale the unknowns. The arc length constraint is applied in the scaled space (uâ‚›=uâ‚šâ‚•./Dsc).\nIf set to :auto, it uses the absolute of the first converged solution as the initial Dsc vector. Zero entries are replaced with minDsc.\nIf set to :none, it fixes Dsc to a vector of ones and doesn't dynamically adapt it. (this forces DynScale to false).\nIf set to :ones, it fixes Dsc to a vector of ones but dynamically continues to scale.\nDynScale::Bool                               : (default true) Whether or not to dynamically adapt the Dsc vector. Each entry is allowed to grow or shrink by a maximum factor of 2 in each step if true.\nminDsc::Float64                              : (default eps()^(4//5)=3e-13) Minimum value for Dscale.\n\nFor Step Length Adaptation. Currently set as dsâ‚™ = dsâ‚’ * xi, where xi = clamp((itopt/itns)^nxi, xirange[1], xirange[2]).\n\nitopt::Union{Symbol,Int}                     : (default :auto) Optimal number of  \nnxi::Float64                                 : (default 0.0) Switches off adaptation by default. \nxirange::Vector{Float64}                     : (default [0.5,2.])\n\nReturns\n\nvector{myNLsoln} representing solutions.\nvector{Int} representing iterations taken.\nvector{Float64} representing step sizes.\nvector{Float64} representing adaptation parameter Î¾.\nvector{Float64} representing the final Dscale matrix.\n\n\n\n\n\n","category":"method"},{"location":"reference/#juliajim.CONTINUATION.EXTRESFUN!-NTuple{4, Any}","page":"Reference","title":"juliajim.CONTINUATION.EXTRESFUN!","text":"EXTRESFUN!(up::nvTypes, fun, sol0::myNLSoln, ds::Float64; parm::Symbol=:riks, Dsc::Vector{Float64}, dup::nvTypes=nothing, Jf::nmTypes=nothing)\n\nReturns the bordered/extended residue function. Appends residue with required arclength constraint.\n\nNote\n\nThe function involves very naive autodiff calls. Does not respect or try to detect jacobian sparsity. For now it is best to provide analytical jacobians for very large problems. \n\nArguments\n\nup::nvTypes: Solution point for evaluation\nfun: Nonlinear function specified in a fashion that can be called as\nfun.f(du,up[1:end-1],up[end]) for the residue.\nfun.jac(J,up[1:end-1],up[end]) for the jacobian (uses ForwardDiff.jacobian! if fun.jac is nothing)\nfun.paramjac(Jp,up[1:end-1],up[end]) for the parameter jacobian (uses ForwardDiff.jacobian! if fun.paramjac is nothing)\nDevelopment Done based on NonlinearFunction from NonlinearSolve\nsol0::myNLSoln: Previous solution point.\nds::Float64: Step size.\nparm::Symbol=:riks: Arclength parameterization. Defaults to :riks. Possible are:\n:riks: Riks' or normal parameterization.\n:arclength: Arclength parameterization.\nDsc::Vector{Float64}: Scaling vector. Recommended to be of the order of magnitude of the expected unknowns. Size same as up.\ndup::nvTypes=nothing: Residue vector (for iip evaluation)\nJf::nmTypes=nothing: Jacobian matrix (for iip evaluation)\n\nReturns\n\ndup::nvTypes=nothing: Residue vector (for iip evaluation)\nJf::nmTypes=nothing: Jacobian matrix (for iip evaluation)\n\n\n\n\n\n","category":"method"},{"location":"reference/#Module-MDOFUTILS","page":"Reference","title":"Module MDOFUTILS","text":"","category":"section"},{"location":"reference/#juliajim.MDOFUTILS","page":"Reference","title":"juliajim.MDOFUTILS","text":"Useful types and routines for dynamic analyses of MDOF problems.\n\n\n\n\n\n","category":"module"},{"location":"reference/#juliajim.MDOFUTILS.MDOFGEN","page":"Reference","title":"juliajim.MDOFUTILS.MDOFGEN","text":"MDOFGEN\n\nStruct storing the generic MDOF system.\n\nFields\n\nM::Matrix{Float64}: Mass matrix\nC::Matrix{Float64}: Damping Matrix\nK::Matrix{Float64}: Stiffness Matrix\nL: Displacement Transform Matrix (can be empty)\nNdofs::Int64: Number of DOFs\nNLTs::Vector{NONLINEARITY}: Vector of nonlinearities present (see NONLINEARITY)\n\n\n\n\n\n","category":"type"},{"location":"reference/#juliajim.MDOFUTILS.NONLINEARITY","page":"Reference","title":"juliajim.MDOFUTILS.NONLINEARITY","text":"NONLINEARITY\n\nStruct storing a nonlinearity.\n\nFields\n\ntype::Symbol: Type of nonlinearity. One of:\n:Inst (for instantaneous nonlinearity)\n:Hyst (for hysteretic nonlinearity)\n:Fdom (for nonlinearity defined in frequency domain)\nOut of these, only the first 2 can be used for transient simulations.\nfunc::Function: Function handle for evaluating nonlinearity. Has signature\n(t, u, udot) for :Inst\n(t, u, up, sp) for :Hyst, where s is some internal state (sp is s at t-Î”t)\nL::Matrix{Float64}: Selection Matrix\nLf: Force shape matrix (can be empty)\n\n\n\n\n\n","category":"type"},{"location":"reference/#juliajim.MDOFUTILS.ADDNL","page":"Reference","title":"juliajim.MDOFUTILS.ADDNL","text":"Description\n\nAdd a nonlinearity to the MDOFGEN object.\n\nArguments\n\nm::MDOFGEN     : MDOFGEN object\ntype::Symbol   : One of :Inst (Instantaneous nonlinearity), :Hyst (Hysteretic nonlinearity), :Fdom (Frequency Domain nonlinearity), :Dla (Dynamic Lagrangian)\nfunc::Function : Nonlinearity function returning the nonlinear force. Different signatures for different types:\n:Inst : (t,u,ud) returning (f, dfdu, dfdud)\n:Hyst : (t,u,uprev,fprev) returning (f, dfdu, dfduprev, dfdfprev)\n:Fdom : (Unl, h, N) returning (F, dFdU, dFdw)\n:Dlag : Not implemented yet\nL              : \nLf             : (default nothing)\n\n\n\n\n\n","category":"function"},{"location":"reference/#juliajim.MDOFUTILS.EPMCRESFUN!-Tuple{Any, MDOFGEN, Any, Any, Int64}","page":"Reference","title":"juliajim.MDOFUTILS.EPMCRESFUN!","text":"Description\n\nArguments\n\nUwxa                : \nm::MDOFGEN          :\nFl                  : (Nd*Nhc) Forcing vector. Zero harmonics are used as static loads. Harmonic portions are used to provide phase constraint.\nh                   : \nN::Int64            : \ntol::Float64        : (default eps()^(4//5))\natype::Symbol       : (default :H1)\nashape::Union{Int64 : \nVector{Float64}}    : (default 1)\nR                   : (default nothing)\ndRdUwx              : (default nothing)\ndRda                : (default nothing)\n\n\n\n\n\n","category":"method"},{"location":"reference/#juliajim.MDOFUTILS.HBRESFUN!-Tuple{Any, MDOFGEN, Union{Nothing, SparseArrays.SparseMatrixCSC, Matrix, Vector}, Any, Int64}","page":"Reference","title":"juliajim.MDOFUTILS.HBRESFUN!","text":"Description\n\nResidue function that can be used for Harmonic Balance forced response analysis.\n\nArguments\n\nUw   : \nm    : \nFl   : \nh    : \nN    : \ntol  : \ndRdU : \ndRdw : \n\n\n\n\n\n","category":"method"},{"location":"reference/#juliajim.MDOFUTILS.HBRESFUN_A!-Tuple{Any, MDOFGEN, Float64, Any, Any, Int64}","page":"Reference","title":"juliajim.MDOFUTILS.HBRESFUN_A!","text":"Description\n\nHB residue with amplitude constraint.\n\nArguments\n\nUfw           : \nm::MDOFGEN    : \nA::Float64    : Amplitude level (also see atype below)\nFl            : \nh             : \nN::Int64      :\natype::Symbol : (default :H1) One of :H1, :RMS. Type of amplitude measure.\nashape        : (default 1) Shape to dof for applying amplitude. If Integer, interpreted as Dof. If vector, taken as shape.\ntol::Float64  : (default eps()^(4//5))\nR             : (default nothing)\ndRdUf         : (default nothing)\ndRdw          : (default nothing)\n\n\n\n\n\n","category":"method"},{"location":"reference/#juliajim.MDOFUTILS.NEWMARKMARCH-Tuple{MDOFGEN, Vararg{Any, 6}}","page":"Reference","title":"juliajim.MDOFUTILS.NEWMARKMARCH","text":"Description\n\nArguments\n\nm::MDOFGEN : \nT0         : \nT1         : \ndt         : \nU0         : \nUd0        : \nFex        : \n\n\n\n\n\n","category":"method"},{"location":"reference/#juliajim.MDOFUTILS.NLEVAL!-Tuple{Union{Nothing, SparseArrays.SparseMatrixCSC, Matrix, Vector}, MDOFGEN, Any, Int64}","page":"Reference","title":"juliajim.MDOFUTILS.NLEVAL!","text":"Description\n\nEvaluate the nonlinearities (and Jacobian) for one period and return the harmonics\n\nArguments\n\nUw         : \nm::MDOFGEN :\nh          :\nN::Int64   : [optional]\ntol        :   \nFNL        : \ndFNLdU     : \ndFNLdw     : \n\n\n\n\n\n","category":"method"},{"location":"reference/#juliajim.MDOFUTILS.NLFORCE-Tuple{MDOFGEN, Any, Any, Any}","page":"Reference","title":"juliajim.MDOFUTILS.NLFORCE","text":"Description\n\nEvaluate the nonlinearities in the time domain for a single time instant.\n\nArguments\n\nm::MDOFGEN : MDOFGEN object.\nt          : Time\nU          : (m.Ndofs) Displacements\nUd         : (m.Ndofs) Velocities\ntp         : (default nothing) Previous instant time\nUp         : (default nothing) (m.Ndofs) Displacements at previous instant.\nUdp        : (default nothing) (m.Ndofs) Velocities at previous instant.\nSp         : (default nothing) (length(m.NLTs)) Vector of vectors of internal states at previous instant. Each nonlinearity can have its own set of internal states.\n\nReturns\n\nF\t: (m.Ndofs) force vector\ndFdU\t: (m.Ndofs, m.Ndofs) force-displacement derivative matrix\ndFdUd\t: (m.Ndofs, m.Ndofs) force-velocity derivative matrix\nS\t: (length(m.NLTs)) vector of vectors of internal states\n\n\n\n\n\n","category":"method"},{"location":"c4_mdofgen_epmc/#ex_c4","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"Example C4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using the Extended Periodic Motion Concept","text":"","category":"section"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"note: The Extended Periodic Motion Concept\nNonlinear normal modes is a very succinct methodology for describing the dynamics of nonlinear systems. It leads to descriptions of the dynamics in terms of amplitude-dependent natural frequency, daming factor, and mode-shapes for each mode. The Extended Periodic Motion Concept is a very popular methodology for capturing these numerically. The idea here is simple - it iteratively looks for what would be a linear self excitation (in terms of a negative viscous factor) that must be supplied to a system so that it has a periodic solution as an invariant set in its unforced state.Mathematically the system we will be solving is:mxM ddotvcu + mxC dotvcu + mxK vcu + vcf_nl = xi mxM dotvcuwhere xi controls the strength of the self-excitation. Since the system is always solved by the trivial solution, an amplitude constraint is often imposed. In order to simplify calculations later on, the first harmonic amplitude of the degrees of freedom is constrained as:vcU_c1^T mxM vcU_c1 + vcU_s1^T mxM vcU_s1 = a^2where vcU_c1 = fracOmegapi int_0^2piOmega vcu cosOmega t dt and vcU_s1 = fracOmegapi int_0^2piOmega vcu sinOmega t dt. (a) is the user-specified amplitude, which serves as the continuation parameter in this context. In addition to this, there is still a phase indeterminacy present in the system. So we choose an arbitrary DoF (which is expected to be non-zero in the mode under consideration), and set its cosine harmonic to be zero (other constraints are also possible). With this, we will have a square system (same number of unknowns as equations) and it can be solved to obtain the amplitude-dependent nonlinear modal characteristics of the system.","category":"page"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"The EPMCRESFUN! routine in MDOFUTILS implements the residue function for EPMC that can be used in tandem with CONTINUATION to obtain nonlinear modal characteristics. This example will illustrate this on the frictional 2DoF oscillator under consideration in Examples C2 and C3. The steps followed are:","category":"page"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"First the system is setup (along with the nonlinearity, see descriptions in Example C2.\nNext we conduct linear modal analysis on the linearized system. This is important to set the initial guess for the EPMC run next.\nNow we setup the Harmonic Balance parameters and then test out the EPMC residue routine using the linearized modes estimated above.\nFinally we conduct the contuation over the modal amplitude (a) and then visualize the results.","category":"page"},{"location":"c4_mdofgen_epmc/#Preamble:-Load-Packages","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"Preamble: Load Packages","text":"","category":"section"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"using GLMakie\nusing LinearAlgebra\nusing SparseArrays\nusing ForwardDiff\nusing NonlinearSolve\nusing DSP\n\nusing juliajim.HARMONIC\nusing juliajim.CONTINUATION\nusing juliajim.MDOFUTILS","category":"page"},{"location":"c4_mdofgen_epmc/#exc4_setup","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"System Setup","text":"","category":"section"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"MCK matrices and nonlinearity setup: identical to Example C2.","category":"page"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"M = I(2);\nK = [2 -1;-1 2];\nC = 0.01*M+0.001*K;\n\nmdl = MDOFGEN(M, C, K);\n\n# Nonlinearity\nkt = 1.0;\nfs = 1.0;\nfnl = (t,u,up,fp)-> if all(abs.(fp+kt*(u-up)).<fs)\n    return fp+kt*(u-up), kt*ones(size(u)), -kt*ones(size(u)), ones(size(u)); else\n        return fs*sign.(fp+kt*(u-up)), zeros(size(u)), zeros(size(u)), zeros(size(u));\nend\nL = [0.0 1.0];\n\nmdl = ADDNL(mdl, :Hyst, fnl, L);\nnothing #hide","category":"page"},{"location":"c4_mdofgen_epmc/#exc4_linmodal","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"Linear Modal Analysis","text":"","category":"section"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"Remember that in the limit of small amplitude, the Jenkins element acts like a linear spring. So we add this additional stiffness to the linearized stiffness matrix and conduct the modal analysis (eigen decomposition). The mode shapes, natural frequencies, and damping are saved since these will be used next as the initial guess for EPMC.","category":"page"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"Knl0 = L'kt*L;\nK0 = mdl.K+Knl0;\nD, V = eigen(K0, mdl.M)\nW0s = sqrt.(D);\nXis = diag(V'mdl.C*V)\n\nmi = 1;  # Mode of interest\nnothing #hide","category":"page"},{"location":"c4_mdofgen_epmc/#exc4_hbsetup","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"Setup HB","text":"","category":"section"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"Setting up parameters for Harmonic Balance: identical to Example C2.","category":"page"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"h = 0:5;\nN = 256;\nt = (0:N-1)*2Ï€/N;\n\nNhc = sum(all(h.==0, dims=2) + 2any(h.!=0, dims=2));\n\n_, _, zinds, rinds, iinds = HINDS(mdl.Ndofs, h)\nFl = zeros(Nhc*mdl.Ndofs);\nFl[rinds[1]] = 1.0;\n\nE, dEdw = HARMONICSTIFFNESS(mdl.M, mdl.C, mdl.K, W0s[mi], h);\n\nU0 = zeros(mdl.Ndofs*Nhc);\nU0[iinds[1:mdl.Ndofs]] = V[:, mi];\nnothing #hide","category":"page"},{"location":"c4_mdofgen_epmc/#exc4_epmcres","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"Test EPMC Residue","text":"","category":"section"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"The ordering of unknowns that will be sent to the EPMCRESFUN! routine is (\\begin{bmatrix} \\vc{u}^T&\\omega&\\xi&\\log_{10}(a) \\end{bmatrix}^T), where the last parameter is the log of the amplitude (base 10). The log-scaling is done on the amplitude to help with numerical conditioning issues.","category":"page"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"In the following we setup everything and test it to ensure that the residue can be used to converge to the solution.","category":"page"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"R = zeros(mdl.Ndofs*Nhc+2);\ndRdU = zeros(mdl.Ndofs*Nhc+2, mdl.Ndofs*Nhc+2);\ndRda = zeros(mdl.Ndofs*Nhc+2);\n\nEPMCRESFUN!([U0; W0s[mi]; Xis[mi]; -2], mdl, Fl, h, N; R=R, dRdUwx=dRdU, dRda=dRda)\n\nA0 = -2.0;\n\nU0 = zeros(mdl.Ndofs*Nhc);\nU0[iinds[1:mdl.Ndofs]] = V[:, mi];\n\nfun = NonlinearFunction((r,uwx,p)->EPMCRESFUN!([uwx;p], mdl, Fl, h, N; R=r),\n    jac=(J,uwx,p)->EPMCRESFUN!([uwx;p], mdl, Fl, h, N; dRdUwx=J),\n    paramjac=(Jp,uwx,p)->EPMCRESFUN!([uwx;p], mdl, Fl, h, N; dRda=Jp));\n\nprob = NonlinearProblem(fun, [U0;W0s[mi];Xis[mi]], A0);\nsol = solve(prob, show_trace=Val(true), maxiters=100);\nnothing #hide","category":"page"},{"location":"c4_mdofgen_epmc/#exc4_cont","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"Continuation","text":"","category":"section"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"Now we are ready to conduct continuation to obtain the amplitude dependent resonance backbone for the system. The invocation of CONTINUATE is exactly as encountered in the earlier examples.","category":"page"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"A0 = -1.;\nA1 = 3.;\nda = 0.05;\ncpars = (parm=:arclength, nmax=1000, Dsc=:none, itopt=4, dpbnds=[da/5, 2da]);\n\nsols, its, dss, xis, Dsc = CONTINUATE([U0;W0s[mi];Xis[mi]], fun, [A0, A1], da; cpars...);\n\nuh = zeros(Complex, maximum(h)+1, length(sols), 2);\nfor i in 1:2\n    uh[h.+1, :, i] = hcat([[s.up[zinds[i:2:end]];\n                            s.up[rinds[i:2:end]]+1im*s.up[iinds[i:2:end]]]\n                          for s in sols]...);\nend\nOms = [s.up[end-2] for s in sols];\nZts = [s.up[end-1] for s in sols]./2Oms;\nAs = [10^s.up[end] for s in sols];\nnothing #hide","category":"page"},{"location":"c4_mdofgen_epmc/#exc4_plot","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"Plotting","text":"","category":"section"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"Finally we visualize the results in terms of harmonics as well as in terms of natural frequency and (equivalent) damping factor characteristic curves.","category":"page"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"his = [1, 3, 5];\n\nset_theme!(theme_latexfonts());\nfsz = 20;\nfig = Figure(fontsize=fsz, size=(1000, 600));\n\naxs = [];\nfor i in eachindex(his[his.<=maximum(h)])\n    ax = Axis(fig[1, i],\n        ylabel=L\"$H_%$(his[i])$ Response (m)\", xscale=log10, yscale=log10);\n    scatterlines!(ax, As, abs.(uh[his[i].+1, :, 1]), label=\"x1\");\n    scatterlines!(ax, As, abs.(uh[his[i].+1, :, 2]), label=\"x2\");\n    push!(axs, ax)\n\n    ax = Axis(fig[2, i], xlabel=L\"Modal Amplitude $a$\",\n        ylabel=L\"$H_%$(his[i])$ Phase (rad)\", xscale=log10);\n    scatterlines!(ax, As, unwrap(angle.(uh[his[i].+1, :, 1])), label=\"x1\");\n    scatterlines!(ax, As, unwrap(angle.(uh[his[i].+1, :, 2])), label=\"x2\");\n    push!(axs, ax)\n    if i==1\n        axislegend(ax)\n    end\nend\nax = Axis(fig[1, length(his)+1],\n    ylabel=L\"Natural Frequency $\\omega_n$ (rad/s)\", xscale=log10);\nscatterlines!(ax, As, Oms);\npush!(axs, ax)\n\nax = Axis(fig[2, length(his)+1], xlabel=L\"Modal Amplitude $a$\",\n    ylabel=\"Damping Factor (%)\", xscale=log10);\nscatterlines!(ax, As, 100Zts);\npush!(axs, ax)\n\nlinkxaxes!(axs...)\n\n    fig","category":"page"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"","category":"page"},{"location":"c4_mdofgen_epmc/","page":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","title":"4: Nonlinear Normal Modes of a 2DoF Hysteretic Oscillator using EPMC","text":"This page was generated using Literate.jl.","category":"page"},{"location":"b1_duffhb/#ex_b1","page":"1: Duffing Oscillator","title":"Example B1: Numerical Continuation on a Duffing Oscillator","text":"","category":"section"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"This example exposes the core functionality of juliajim.CONTINUATION through a very minimal example. The governing equations for the oscillator are taken as","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"ddotx + 2zeta_0omega_0 dotx + omega_0^2 x + alpha x^3 = FcosOmega t","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"The steps that will be followed in this file are as follows:","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"First we define a \"harmonic residue\" function for the Duffing oscillator in a way that returns the residue, its Jacobian with respect to the vector of harmonics (see Example a), and also with respect to the excitation frequency.\nNext we define the parameters for the problem and setup the necessary variables for the Harmonic Balance (and AFT).\nThen we conduct the actual continuation after setting up parameters for this.\nFinally the results are plotted in terms of the different harmonics present.","category":"page"},{"location":"b1_duffhb/#Preamble:-Load-packages","page":"1: Duffing Oscillator","title":"Preamble: Load packages","text":"","category":"section"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"using GLMakie\nusing LaTeXStrings\nusing LinearAlgebra\nusing NonlinearSolve\nusing ForwardDiff\nusing DSP\n\nusing juliajim.HARMONIC\nusing juliajim.CONTINUATION","category":"page"},{"location":"b1_duffhb/#exb1_res","page":"1: Duffing Oscillator","title":"Define Residue Function","text":"","category":"section"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"We setup the Harmonic Balance residue function such that it takes as input the list of harmonics and the excitation frequency as a single vector. This is convenient for bordered continuation strategies.","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"The computation of the residue itself is as follows:","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"Estimate the linear harmonic stiffness\nTransform the given harmonic coefficients into the time domain (for one cycle) using AFT, and use that to compute the nonlinearity in one oscillation cycle.\nTransform the computed force into the Frequency domain by computing its harmonics using AFT.\nAssemble the overall harmonic balance equation.","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"Jacobian computations also follow similar steps. The function is implemented \"in-place\" in order to be efficient - the Jacobian(s) are computed only when requested.","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"function RESFUN!(Uw, Fl, pars, h, Nt; R=nothing, dRdU=nothing, dRdw=nothing)\n    (; z0, w0, al, F) = pars;\n\n    Om = Uw[end];\n    Nhc = sum((h.==0)+2(h.!=0));\n\n    # Linear Portion\n    E, dEdw = HARMONICSTIFFNESS(1.0, 2z0*w0, w0^2, Om, h);\n\n    # AFT For nonlinear force\n    ut  = AFT(Uw[1:end-1], h, Nt, :f2t);\n\n    # Construct Residue\n    if !(R === nothing)\n        ft  = al*ut.^3;\n        Fnl = AFT(ft, h, Nt, :t2f);\n\n        R[:] = E*Uw[1:end-1] + Fnl - Fl*F;\n    end\n    if !(dRdU === nothing)\n        cst = AFT(Float64.(I(Nhc)), h, Nt, :f2t);\n        dfdat = (3al*ut.^2) .* cst;\n        Jnl    = AFT(dfdat, h, Nt, :t2f);\n\n        dRdU[:, :] = E + Jnl;\n    end\n    if !(dRdw === nothing)\n        dRdw[:] = dEdw*Uw[1:end-1];\n    end\n    return nothing;\nend","category":"page"},{"location":"b1_duffhb/#exb1_setup","page":"1: Duffing Oscillator","title":"Setup","text":"","category":"section"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"We now setup the parameters of the system and forcing vector for Harmonic balance.","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"  Î¾ = 1e0;  # Scaling fudge factor - change to test the robustness of the continuation\npars = (z0 = 0.5e-2, w0 = 2., al = 0.1*Î¾^2, F = 0.1/Î¾);\n\nh = (0:5);  # Choose list of harmonics\n# h = 1:2:5;  # Also possible\nOm = 0.1;\n\nNhc = sum((h.==0)+2(h.!=0));\nNt = 2^9;\n\nFl = zeros(Nhc);\n_,_,zinds,rinds,iinds = HINDS(1, h)\nFl[rinds[1]] = 1.0;\nnothing #hide","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"Now Fl is the harmonic forcing vector. Next, we define a NonlinearFunction object (from [NonlinearSolve.jl]) that will be used by juliajim for the continuation. Note that for this, the unknowns are the harmonics and the parameter (has to be scalar) is the excitation frequency, with which the continuation procedure will be carried out.","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"We also use the same RESFUN! function defined above to specify the jac (jacobian w.r.t. the unknowns) and paramjac (jacobian w.r.t. the frequency). If these are left empty, ForwardDiff will be used to estimate them.","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"fun = NonlinearFunction((r,u,p)->RESFUN!([u;p],Fl,pars,h,Nt;R=r),\n                        jac=(J,u,p)->RESFUN!([u;p],Fl,pars,h,Nt;dRdU=J),\n                        paramjac=(Jp,u,p)->RESFUN!([u;p],Fl,pars,h,Nt;dRdw=Jp));\nnothing #hide","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"Now we are ready!","category":"page"},{"location":"b1_duffhb/#Check-by-solving-for-a-Single-point","page":"1: Duffing Oscillator","title":"Check by solving for a Single point","text":"","category":"section"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"We set the initial guess as the solution of the linearized oscillator and solve the problem using NonlinearSolve.jl. The following should work properly and converge within 3-4 iterations.","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"E = zeros(Nhc, Nhc);\nHARMONICSTIFFNESS!(E, nothing, 1.0, 2pars.z0*pars.w0, pars.w0^2, Om, h);\nU0 = E\\ (Fl*pars.F);\n\nprob = NonlinearProblem(fun, U0, Om);\nsol = solve(prob, show_trace=Val(true));\nnothing #hide","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"Inspecting the solution would show that the solution has only odd-harmonic content, as expected from a simple system with a cubic spring:","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"sol.u","category":"page"},{"location":"b1_duffhb/#exb1_cont","page":"1: Duffing Oscillator","title":"Continuation","text":"","category":"section"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"Now we are ready to conduct the actual continuation. First things first, we setup the starting and ending frequencies (Om0, Om1) and the starting step length dOm. In juliajim the units of the step length are always in the same units as the continuation parameter, the excitation frequency in this case.","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"Om0 = 2pars.w0;\nOm1 = 0.02pars.w0;\ndOm = 0.1pars.w0;\ncpars = (parm=:arclength, nmax=2000);\nnothing #hide","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"We also set two parameters relevant for continuation (see the documentation of CONTINUATE for an exhaustive list of parameters with descriptions). Here we are specifying that we would use the arclength parameterization and will do the computation for a maximum of 2000 points. We provide the initial guess the same as before (of the linearized problem) and can reuse the same NonlinearFunction object from before.","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"HARMONICSTIFFNESS!(E, nothing, 1.0, 2pars.z0*pars.w0, pars.w0^2, Om0, h);\nU0 = E\\ (Fl*pars.F);\n\nsols, its, dss, xis, Dsc = CONTINUATE(U0, fun, [Om0, Om1], dOm; cpars...);\nnothing #hide","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"CONTINUATE returns, firstly, a vector of myNLSoln objects. These store the solution vector up, local tanget dupds, and any Jacobians if required.","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"In order to help with plotting and other postprocessing, it is sometimes helpful to express the harmonics in the complex notation. So we do that here before moving on to plotting.","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"uh = zeros(Complex, maximum(h)+1, length(sols));\nuh[h.+1, :] = hcat([[s.up[zinds]; s.up[rinds]+1im*s.up[iinds]] for s in sols]...);\nOms = [s.up[end] for s in sols];\nnothing #hide","category":"page"},{"location":"b1_duffhb/#exb1_plot","page":"1: Duffing Oscillator","title":"Plotting","text":"","category":"section"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"Now we choose a few harmonics and plot them using GLMakie (I highly recommend Makie for interativity as well as for its rich feature-set). The output should show the primary resonance (visible in all harmonics) as well as secondary superharmonic resonances (visible in the higher harmonics).","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"his = [1, 3, 5];\n\nfsz = 24;\nfig = Figure(fontsize=fsz, size = (1000, 600));\n\nax1s = [];\nax2s = [];\nfor i in eachindex(his[his.<=maximum(h)])\n    ax = Axis(fig[1, i], ylabel=L\"$H_%$(his[i])$ Response (m)\", yscale=log10);\n    scatterlines!(ax, Oms, abs.(uh[his[i].+1, :]));\n    push!(ax1s, ax);\n\n    ax = Axis(fig[2, i], xlabel=L\"Excitation Frequency $\\Omega$\",\n              ylabel=L\"$H_%$(his[i])$ Phase (rad)\");\n    scatterlines!(ax, Oms, unwrap(angle.(uh[his[i].+1, :])));\n    push!(ax2s, ax);\nend\nlinkxaxes!(vcat(ax1s, ax2s)...)\n\n    fig","category":"page"},{"location":"b1_duffhb/#Outro","page":"1: Duffing Oscillator","title":"Outro","text":"","category":"section"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"This file shows how to use the routines in HARMONIC to construct a residue and then use this function with CONTINUATION to conduct numerical continuation to compute its forced response.","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"","category":"page"},{"location":"b1_duffhb/","page":"1: Duffing Oscillator","title":"1: Duffing Oscillator","text":"This page was generated using Literate.jl.","category":"page"},{"location":"examples/#Overview","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"The examples are organized in an order of increasing complexity.","category":"page"},{"location":"examples/#Example-code-snippet","page":"Overview","title":"Example code snippet","text":"","category":"section"},{"location":"examples/","page":"Overview","title":"Overview","text":"using juliajim.HARMONIC\n\nN = 8\nt = (0:N-1)*2pi/N;\ny = cos.(t);\nh = 0:3;\nYh = AFT(y, h,N, :t2f);","category":"page"},{"location":"#Welcome-to-the-juliajim-Documentation!","page":"Home","title":"Welcome to the juliajim Documentation!","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Welcome to the documentation page. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Why should you be interested?\nHere's my vision for the package: I would like to use a singly specified dynamical system to subject it to different types of analyses. This includes transient simulations, steady-state periodic/quasi-periodic, etc.If this is interesting to you, you may find value in the project. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note that this is still under heavy development. It is functional but the documentation needs a lot of work. Please reach out to me in case you're interested in contributing, share the vision, and have started loving Julia! :-)","category":"page"},{"location":"#Introduction","page":"Home","title":"Introduction","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This is a set of Julia routines to help with computational research in nonlinear structural dynamics. Most of the content is derived from my earlier efforts (functional but badly maintained) with MATLAB/Octave at https://github.com/Nidish96/octave-jim.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The development is not yet complete and the package is not registered either. But you can try out the package by installing it manually from Github as follows:","category":"page"},{"location":"","page":"Home","title":"Home","text":"] dev https://github.com/Nidish96/juliajim","category":"page"},{"location":"","page":"Home","title":"Home","text":"or, with Pkg","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.develop(url=\"https://github.com/Nidish96/juliajim\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"After this you can just do using juliajim and get cracking.","category":"page"},{"location":"#Getting-Started","page":"Home","title":"Getting Started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Although formal documentation is highly lacking, a series of examples with progressively increasing complexity designed to expose most of the features of the toolbox are provided here. Each example is documented to a reasonable degree. Going through the examples should already help you get started on the analysis. The following is a road-map for navigating the examples:","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you're just here for the...","category":"page"},{"location":"","page":"Home","title":"Home","text":"Fourier Utilities, start by looking at Example A.\nContinuation Utilities, start by looking at Examples B1 and B2.\nIntegrated nonlinear dynamics, start by looking at Examples C1-C5. Note:\nFor Harmonic Balance forced response computations, see Examples C1, C2, and C3.\nFor Harmonic Balance Extended Periodic Motion Concept (EPMC) Nonlinear Modal Analysis, see Example C4.\nFor transient simulation utilities, see Example C5, which uses a Newmark-beta implementation.\nOut of the above, all examples except Example C1 use a hysteretic nonlinearity.","category":"page"},{"location":"#Why-yet-another-package?","page":"Home","title":"Why yet another package?","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Each programming language/environment/specification you choose (MATLAB, Python, Julia, C/C++, etc.) has its own host of libraries that can do a lot of what juliajim sets out to do. Notable examples include Trilinos (C++) and the SciML ecosystem (Julia), which can do what juliajim sets out and (FAR!) more.","category":"page"},{"location":"","page":"Home","title":"Home","text":"My vision for this tool is this: I'd like to be able to specify a system once and conduct different types of analysis on it. This mainly includes nonlinear static solves, transient time-marching (also shooting for periodic solutions), harmonic balance (for periodic and quasi periodic solutions), and variants therein (potentially more).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Although a lot of the existing tools come very close to acheiving this, they don't span nearly all the kinds of nonlinearities. For instance, it is presently quite non-trivial to use any existing code as is for simulating systems with something as simple as an elastic dry-friction element (a hysteretically saturated linear spring).","category":"page"},{"location":"","page":"Home","title":"Home","text":"Furthermore, very few tools provide a lot of convenience for harmonic balance simulations. A notable exception to this is the MATLAB tool NLvib (a very well designed set of minimal routines that work really well). The main reason that juliajim is not just a fork of NLvib is Julia - I'm convinced of the several advantages of Julia and want to ensure a useful package exists in Julia that I can throw myself behind. Furthermore, since I started using Julia MATLAB has started feeling really annoying (read: https://mateusaraujo.info/2024/04/03/matlab-is-dead-long-live-julia/ ).","category":"page"},{"location":"#Design-Philosophy","page":"Home","title":"Design Philosophy","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"I am taking care to ensure that the project is as small as possible in order to ensure that the routines developed here can be part of something bigger. Furthermore, the different parts of the package (HARMONIC, CONTINUATION) are written in order to be fully functional independently. For instance, the HB routines in the former portion of the toolbox can be used to write residue that can be used with BifurcationKit.jl for doing numerical continuation if the provided routines in CONTINUATION are deemed insufficient. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"MDOFUTILS and its suite of routines (including frequency domain residues, time domain marchers, etc.) are my way of using the two main parts of the package to provide a functional interface for nonlinear dynamics research.","category":"page"},{"location":"#Conventions","page":"Home","title":"Conventions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"All scripts are tagged by an alphabet. \nAll routines are upper case. ","category":"page"},{"location":"#Other-Projects-to-Look-at","page":"Home","title":"Other Projects to Look at","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"NLvib: A Matlab toolbox for harmonic balance, shooting, and continuation.\ntmdsimpy: A Python package with very similar goals as juliajim.\noctave-jim: My old code - its a mess that works.\nHarmonicBalance.jl: A Julia toolbox for harmonic balance. \nBifurcationKit.jl: A great set of continuation and bifurcation routines.","category":"page"}]
}
